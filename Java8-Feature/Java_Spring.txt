

What are the main features of OOPs in java?
Answer: Below are Main features of OOPs in java
1. Abstraction
2. Encapsulation
3. Inheritance
4. Polymorphism
5. Classes and Objects
6. Method Overriding
7. Method Overloading

Encapsulation
̲Encapsulation means keeping data and the methods that modify that data together within a single unit, and restricting outside access

Abstraction
Abstraction involves showing only the important features of an object while hiding the complex details
ex: The internal details of how each specific animal makes a sound (makeSound() method) are hidden within each subclass (ex.Dog)

Inheritance
Inheritance allows one class to inherit fields and methods from another class

Polymorphism
Polymorphism allows methods to do different things based on the object it is acting upon

Method Overriding
Method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass

Method Overloading
̲Method overloading allows multiple methods with the same name but different parameters within the same class

Classes and Objects
Classes are blueprints for creating objects, and objects are instances of classes that hold data and methods to manipulate that data
==============================
Difference between Spring Framework and Spring Boot

Spring Framework 
-> Allows to develop apps using 3 types of Configs i.e. xml driven configs, Annotations driven cofigs, 100% code driven configs
-> Programmer explicitly created IOC Container except in Spring MVC application
-> Does not give embedded server. So to run application we need to arrange web server explicitly.
-> Does not give any in-memory databases
-> We need to add dependencies (jar files) manually using gradle/maven
-> Bit lightweight as compared of Spring Boot because of No AutoConfiguratin support

Spring Boot
-> Supports only one type of confgs that is through annotations and giving inputs for autoConfigutaration for application.properties file
-> Programmer does not create IoC Container , rather he gets it by calling SpringApplication.run()
-> Gives Tomcat, Jetty and etc servers as Embedded servers
->Gives in-memory databases like h2
-> Bit heavy weight due to AutoConfiguration support which created Objects which might not even needed
-> Spring boot gives starters which provide main jars, dependent jars and related jars as well.

======================================

🚀 Java Interview Prep: Hibernate Essentials
Hibernate is a powerful ORM framework in Java that simplifies database operations, reduces boilerplate code, and boosts performance.

📌 1. What is Hibernate & Why Use It?
Hibernate maps Java objects to database tables, letting you interact without SQL.
✅ Reduces repetitive JDBC code
✅ Supports caching for faster performance
✅ Works across databases

📌 2. How is Hibernate Different from JDBC?
JDBC requires SQL queries and manual database handling.
Hibernate automates mapping and caching for better performance.

📌 3. Key Hibernate Components
✔ SessionFactory – Manages connections
✔ Session – Executes queries
✔ Transaction – Ensures commit/rollback

📌 4. What is HQL?
HQL works on Java objects instead of database tables.
🔹 SQL Example: SELECT * FROM employees;
🔹 HQL Example: FROM Employee

📌 5. What is Caching in Hibernate?
Caching improves query performance.
⚡ First-Level Cache – Default, session-specific.
⚡ Second-Level Cache – Configurable, shared across sessions.

📌 6. Lazy vs. Eager Loading
👉 Lazy Loading – Fetches data only when accessed.
👉 Eager Loading – Fetches all data immediately.
💡 Example:
@OneToMany(fetch = FetchType.LAZY)
@OneToMany(fetch = FetchType.EAGER)

📌 7. How Does Hibernate Handle Transactions?
Hibernate ensures ACID transactions for consistency.
✅ Example:
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
session.save(employee);
tx.commit();
session.close();

📌 8. Common Hibernate Annotations
@Entity – Marks a class as a database entity
@Table – Maps a class to a table
@Id – Specifies the primary key

📌 9. Hibernate Relationships
✔ @OneToOne – One-to-one
✔ @OneToMany – One-to-many
✔ @ManyToMany – Many-to-many

📌 10. Hibernate Integration with Spring Boot
💡 Add following to application.properties:
spring.datasource.url=jdbc:mysql://localhost:3306/db
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

=================================
Java 8 Streams: Transform, Filter, and Reduce Your Way to Cleaner Code!
Streams enable functional-style programming in Java, allowing us to write cleaner, more readable, and more efficient code. 

💡 Key Methods in Streams :-
 1. map():
Transforms each element in a stream.
Example: Convert a list of names to uppercase.

List<String> names = List.of("John", "Jane");
List<String> upperNames = names.stream()
 .map(String::toUpperCase)
 .toList();

 2. filter():
Filters elements based on a condition.
Example: Get even numbers from a list.

List<Integer> numbers = List.of(1, 2, 3, 4);
List<Integer> evens = numbers.stream()
 .filter(n -> n % 2 == 0)
 .toList();

 3. flatMap():
Flattens nested structures like lists of lists into a single stream.
Example: Combine lists into one.

List<List<Integer>> listOfLists = List.of(List.of(1, 2), List.of(3, 4));
List<Integer> flatList = listOfLists.stream()
 .flatMap(List::stream)
 .toList();

 4. reduce():
Reduces elements to a single value using an accumulator.
Example: Sum a list of numbers.

List<Integer> numbers = List.of(1, 2, 3, 4);
int sum = numbers.stream()
 .reduce(0, Integer::sum);

 5. forEach():
Iterates through elements for side-effects (e.g., printing).
Example: Print all elements in a list.

List<String> names = List.of("John", "Jane");
names.stream().forEach(System.out::println);

🌟 Why Use Streams?
 • Readable Code: Concise and expressive.
 • Efficient Processing: Streams are lazy; operations are only executed when needed.
 • Parallel Processing: With .parallelStream(), you can easily process data in parallel.
 
 ==================================
 inject a Prototype-scoped bean into a Singleton-scoped bean in Spring
1. How to use Lambda expressions and Stream API in Java? 
Can you write a simple example where you filter a list of numbers and find the sum of even numbers using Java Streams?
2. What is the difference between synchronized and volatile in Java? Can you give an example of when each would be used?
3. Can you explain how Spring Boot's auto-configuration mechanism works? How does it help developers to quickly set up an application?
=>a.Spring Boot Starters: 
	-Spring Boot provides starter dependencies (e.g., spring-boot-starter-web, spring-boot-starter-data-jpa) that bundle commonly used libraries for specific functionalities.
	-When you include a starter in your pom.xml or build.gradle, Spring Boot automatically assumes what you might want to configure based on these dependencies.
b.@EnableAutoConfiguration and @SpringBootApplication:
	-The @EnableAutoConfiguration part scans the classpath for available libraries and configures the application based on their presence.
c.Conditional Configuration:
	-Spring Boot's auto-configuration uses conditional annotations (e.g., @ConditionalOnClass, @ConditionalOnMissingBean) to determine whether certain configurations should be applied.
		-If a DataSource bean is not already defined but a HikariCP library is available, Spring Boot configures a default DataSource.
d.Default Properties:
	-Spring Boot provides sensible default configurations for many components.
	-If using an embedded database like H2, Spring Boot sets it up automatically.
Default server settings are applied (e.g., running on port 8080).
e.Customizing Configuration:
	-Developers can override auto-configuration defaults by:
	-Providing custom settings in the application.properties or application.yml file.
f.Auto-Configuration Classes:
	-Spring Boot uses specific configuration classes for auto-configuration, which are listed in the spring.factories file under META-INF/ in the spring-boot-autoconfigure JAR.

4. Can you explain the concept of Dependency Injection (DI) in Spring? How have you used DI in your Spring Boot applications? Can you give an example of constructor-based DI and setter-based DI?
5. How can you expose RESTful services in Spring Boot? Can you walk me through creating a simple REST API with a GET and POST method?
6. How to secure a Spring Boot application? Can you explain how you would use Spring Security for user authentication and authorization? Can you describe an example where you configured role-based access control?
7. How to deploy a Spring Boot application to an AWS EC2 instance? 
8. Can you explain how AWS S3 works? How to use it in a Spring Boot application to store and retrieve files?
9. Can you explain how Maven manages the build lifecycle of a project? What are the main phases of the Maven lifecycle, and how have you used them in your projects?
10. How does Maven handle project dependencies? Can you explain how you manage version conflicts with Maven?
11. What are Maven profiles and plugins? How do you use them to customize builds for different environments or purposes?
12. How to write unit tests in Java using JUnit? Can you provide an example of a simple unit test for a Spring Boot service method?
13. What is Mockito used for, and how would you use it to mock a service in a Spring Boot application? Can you show an example where you mock an external service call in a unit test?
14. Can you explain Test-Driven Development (TDD)? How have you applied TDD in your Spring Boot projects, and what challenges did you face while writing tests before the implementation?

========================

#SDET
1. Reverse a String:
 Write a Java program to reverse a given string.
2. Find the Largest Element in an Array:
 Find and print the largest element in an array.
3. Check for Palindrome:
 Determine if a given string is a palindrome (reads the same backward as forward).
4. Factorial Calculation:
 Write a function to calculate the factorial of a number.
5. Fibonacci Series:
 Generate the first n numbers in the Fibonacci sequence.
6. Check for Prime Number:
 Write a program to check if a given number is prime.
7. String Anagrams:
 Determine if two strings are anagrams of each other.
8. Array Sorting:
 Implement sorting algorithms like bubble sort, merge sort, or quicksort.
9. Binary Search:
 Implement a binary search algorithm to find an element in a sorted array.
10. Duplicate Elements in an Array:
 Find and print duplicate elements in an array.
11. Linked List Reversal:
 Reverse a singly-linked list.
12. Matrix Operations:
 Perform matrix operations like addition, multiplication, or transpose.
13. Implement a Stack:
 Create a stack data structure and implement basic operations (push, pop).
14. Implement a Queue:
 Create a queue data structure and implement basic operations (enqueue, dequeue).

15. Inheritance and Polymorphism:
 Implement a class hierarchy with inheritance and demonstrate polymorphism.
16. Exception Handling:
 Write code that demonstrates the use of try-catch blocks to handle exceptions.
17. File I/O:
 Read from and write to a file using Java's file I/O capabilities.
18. Multithreading:
 Create a simple multithreaded program and demonstrate thread synchronization.
19. Lambda Expressions:
 Use lambda expressions to implement functional interfaces.
20. Recursive Algorithms:
 Solve a problem using recursion, such as computing the factorial or Fibonacci sequence.
 
===================================

// SpringBoot

1. In how many ways we can return the data in springboot rest api.
2. Which framework used to create web and restful applications in spring that can return JSON and XML file ?
3. Which is more secure ? SOAP or REST ? Why ?
4. What are different ways to configure a class as Spring Bean ?
5. Explain the role of the Tomcat server in the Spring Boot Application
6. Which classe responsible for handling incoming HTTP requests and returning an appropriate response ?
7. Why do we need springBoot auto configuration ?
8. About Metadata in Spring Framework?
9. What are the limitations of Autowiring ?
10. Can you inject null and empty string values in Spring? If yes, how ?

PHASE 1 - Basics

• Creating a spring boot project using spring initializr
• Maven and gradle build tools
• Annotations
• Profiles and environment-specific configurations
• @getmapping, @postmapping, @putmapping, @deletemapping
• Handling path variables and request parameters
• Setting up database connection (h2, mysql, postgresql)
• Using jparepository and crudrepository
• Introduction to spring boot devtools
• Enabling hot reloading
• Spring batch, scheduling and cron expressions


PHASE 2 - Intermediate

• Using @controlleradvice and @exceptionhandler
• Custom error responses and exception classes
• Global exception handling
• Basic authentication
• Configuring security for apis
• Implementing jwt (json web tokens) for stateless authentication
• Introduction to hateoas
• Versioning rest apis (uri, parameter, headers)
• Unit testing with junit and mockito
• Writing integration tests with spring boot test
• Testing restful services with mockmvc
• Exploring actuator endpoints
• Creating custom health indicators


PHASE 3 - Advanced

• Using @profile annotation
• Configuring environment-specific beans
• Switching profiles for different environments
• Setting up a spring cloud project
• Key components of spring cloud
• Setting up eureka server
• Registering microservices with eureka
• Service discovery in action
• Introduction to api gateway
• Setting up spring cloud gateway
• Configuring routes and filters
• Setting up spring cloud config server
• Managing configuration in a centralized repository
• Configuring spring boot applications to use config server


PHASE 4 - Microservices

• Introduction to inter-service communication
• Using rest template for synchronous communication
• Using feign client for simplified service calls
• Setting up resilience4j
• Configuring circuit breakers, retry in microservices
• Introduction to distributed tracing
//Multithreading interview question

//==========================================

 Top 5 Essential Spring Boot Interview Questions & Answers 

1. What is Spring Boot and why is it used?
Spring Boot simplifies the development of Spring-based applications by providing production-ready defaults and reducing configuration. 
It allows faster development with minimal setup.

2. What are the advantages of using Spring Boot?
Auto-Configuration: Automatically configures your app based on the project’s dependencies.
Embedded Servers: Supports embedded web servers like Tomcat, Jetty, and Undertow.
Production-Ready: Includes features like health checks, metrics, and monitoring.
Minimal Configuration: Reduces boilerplate code, allowing faster development.

3. What is the use of @SpringBootApplication annotation?
This annotation combines @Configuration, @EnableAutoConfiguration, and @ComponentScan, 
simplifying application setup and reducing the need for explicit configuration.

4. What is Spring Boot Actuator?
Spring Boot Actuator offers production-ready features like health checks, metrics, and monitoring, 
allowing you to track your app's performance and health.

5. How can you create RESTful services in Spring Boot?
Use the @RestController annotation and define endpoints with @GetMapping, @PostMapping, etc.,
 to create REST APIs easily and effectively in Spring Boot.

============================================

✅𝟒𝟎 𝐄𝐬𝐬𝐞𝐧𝐭𝐢𝐚𝐥 𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 𝐀𝐧𝐧𝐨𝐭𝐚𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐞𝐫s

1. @Required: Ensures a bean property must be set.
2. @Autowired: Automatically injects dependencies.
3. @Configuration: Declares @Bean methods in a class.
4. @ComponentScan: Configures component scanning.
5. @Bean: Produces a managed Spring bean.
6. @Qualifier: Specifies bean injection options.
7. @Lazy: Delays bean initialization.
8. @Value: Injects a property value.
9. @Component: Marks a Spring component.
10. @Controller: Handles MVC views.
11. @Service: Marks service layer components.
12. @Repository: Marks DAOs with exception translation.
13. @EnableAutoConfiguration: Enables auto-configuration.
14. @SpringBootApplication: Configures Spring Boot app.
15. @RequestMapping: Maps HTTP methods.
16. @GetMapping: Handles HTTP GET requests.
17. @PostMapping: Maps HTTP POST requests.
18. @PutMapping: Maps HTTP PUT requests.
19. @DeleteMapping: Maps HTTP DELETE requests.
20. @PatchMapping: Maps HTTP PATCH requests.
21. @RequestBody: Binds HTTP request body.
22. @ResponseBody: Binds HTTP response body.
23. @PathVariable: Extracts URI values.
24. @RequestParam: Extracts query parameters.
25. @RequestHeader: Extracts header values.
26. @RestController: Combines @Controller and @ResponseBody.
27. @RequestAttribute: Binds request attributes.
28. @CookieValue: Binds HTTP cookie values.
29. @CrossOrigin: Enables CORS.
30. @Profile: Specifies bean profiles.
31. @Scope: Defines bean scopes.
32. @Conditional: Registers beans conditionally.
33. @Primary: Sets primary autowired beans.
34. @PropertySource: Adds PropertySource to Environment.
35. @EnableAsync: Enables asynchronous methods.
36. @EnableScheduling: Enables scheduled tasks.
37. @EnableCaching: Enables caching.
38. @RestControllerAdvice: Specializes @ControllerAdvice for REST.
39. @JsonIgnoreProperties: Ignores JSON properties.
40. @JsonProperty: Maps JSON properties to Java fields.

==========================================

Java Developer Interview Questions for Experienced
hashtag#realtime hashtag#java hashtag#scenario hashtag#interview hashtag#questions
1.     You need to prevent API abuse by implementing a rate limiter in Spring Boot.
·       How would you implement it?
·       Which algorithms would you use? (Token Bucket vs. Leaky Bucket)
·        How can Redis help in rate limiting?
2.     Your system expects 1M+ requests per second during peak load.
·       How do you scale your system?
·       What caching mechanisms would you implement?
·       How do you handle sudden traffic spikes?

3.     Users are uploading large files (1GB+), and the service is slowing down.

·       What’s the best way to handle file uploads efficiently?
·       Would you use S3, MinIO, or another storage solution?
·       How to implement a resumable upload?

4.     Identify and fix the memory leak in the following code:
class MemoryLeakExample {
 private static List<String> cache = new ArrayList<>();

 public void addData() {
 for (int i = 0; i < 1000000; i++) {
 cache.add("Data-" + i);
 }
 }
}
·       What is wrong with this code?
·       How do you fix the memory leak?

5.     The following code is not thread-safe. Why?

class Counter {
 private int count = 0;

 public void increment() {
 count++;
 }
}
·       What’s wrong with this implementation?
·       How would you make it thread-safe?

6.     Your REST API is slow. Fix this code:

@GetMapping("/users")
public List<User> getAllUsers() {
 return userRepository.findAll();
}
·       Why is this method slow for large datasets?
·       How can you optimize it using pagination?
==========================
🚀 Spring Boot Caching

In today’s fast-paced development world, application performance is critical. 
One way to enhance performance is by leveraging Spring Boot Caching, which simplifies adding a caching layer to your application.

Let me break down the key caching annotations Spring Boot provides:

📌 @EnableCaching
Activates caching for your Spring Boot application.

📌 @Cacheable
Caches the result of a method. If the method is called with the same parameters, the cached result is returned, saving processing time.

@Cacheable(value = "books", key = "#id", unless = "#result == null")
public Book getBookById(Long id) {
 return bookRepository.findById(id);
}

📌 @CachePut
Updates the cache with a new value whenever the annotated method is invoked.

@CachePut(value = "books", key = "#book.id")
public Book updateBook(Book book) {
 return bookRepository.save(book);
}

📌 @CacheEvict
Removes entries from the cache to keep data consistent.

@CacheEvict(value = "books", key = "#id")
public void deleteBookById(Long id) {
 bookRepository.deleteById(id);
}

📌 @Caching
Combines multiple cache operations for complex scenarios.


@Caching(
 put = { @CachePut(value = "books", key = "#book.id") },
 evict = { @CacheEvict(value = "allBooks", allEntries = true) }
)
public Book saveBook(Book book) {
 return bookRepository.save(book);
}

📌 @CacheConfig
Reduces redundancy by defining common cache configurations at the class level.

@CacheConfig(cacheNames = "books")
public class BookService {
 @Cacheable(key = "#id")
 public Book getBookById(Long id) {
 return bookRepository.findById(id);
 }
}


1️⃣ Add the Spring Boot cache dependency:

<dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-cache</artifactId>
</dependency>

2️⃣ Enable caching:

@SpringBootApplication
@EnableCaching
public class Application {
 public static void main(String[] args) {
 SpringApplication.run(Application.class, args);
 }
}

3️⃣ Configure your caching provider (e.g., EhCache, Caffeine, Redis).

By leveraging these annotations, you can seamlessly integrate caching into your Spring Boot application 
and improve performance by reducing redundant computations or database hits.

======================================

𝐍𝐞𝐬𝐭𝐞𝐝 𝐂𝐥𝐚𝐬𝐬𝐞𝐬 𝐢𝐧 𝐉𝐚𝐯𝐚

In Java, a nested class is a class defined within another class. There are 𝐟𝐨𝐮𝐫 types of nested classes:

1) 𝐌𝐞𝐦𝐛𝐞𝐫 𝐈𝐧𝐧𝐞𝐫 𝐂𝐥𝐚𝐬𝐬: A member inner class is a class defined at the same level as other class members. To instantiate it, we must first instantiate the outer class. Member inner classes have access to all members of the outer class, including 𝐩𝐫𝐢𝐯𝐚𝐭𝐞 𝐦𝐞𝐦𝐛𝐞𝐫𝐬.

2) 𝐋𝐨𝐜𝐚𝐥 𝐈𝐧𝐧𝐞𝐫 𝐂𝐥𝐚𝐬𝐬: A local inner class is a class defined within a method, similar to a local variable. Its scope is limited to the method, and it has access to all members of the enclosing class. However, it can only access 𝐟𝐢𝐧𝐚𝐥 or 𝐞𝐟𝐟𝐞𝐜𝐭𝐢𝐯𝐞𝐥𝐲 𝐟𝐢𝐧𝐚𝐥 local variables of the enclosing method.

3) 𝐀𝐧𝐨𝐧𝐲𝐦𝐨𝐮𝐬 𝐈𝐧𝐧𝐞𝐫 𝐂𝐥𝐚𝐬𝐬: Anonymous inner classes are inner classes with no name and are declared and instantiated in a single expression. They can extend a class or implement an interface but are limited to one superclass or one interface. Note that 𝐥𝐚𝐦𝐛𝐝𝐚𝐬 introduced in Java 8 serve similar use cases for functional interfaces.

4) 𝐒𝐭𝐚𝐭𝐢𝐜 𝐍𝐞𝐬𝐭𝐞𝐝 𝐂𝐥𝐚𝐬𝐬: Static nested classes are defined with the 𝐬𝐭𝐚𝐭𝐢𝐜 keyword at the same level as other class members. They can be instantiated without an object of the enclosing class and can only access static members of the outer class.

======================================

𝗙𝗿𝗲𝗲 𝗞𝗮𝗳𝗸𝗮 𝗥𝗲𝘀𝗼𝘂𝗿𝗰𝗲𝘀: 

1. Apache Kafka crash course with Spring Boot 3.0.x by Java Techie
 - https://lnkd.in/dP3wziT6
2. Apache Kafka with Spring Boot crash course by Daily Code Buffer
 - https://lnkd.in/dhz-kJB5
3. All about Kafka by Learning Tutorial
 - https://lnkd.in/drZ_hbq2
4. Kafka Tutorial by Intellipaat
 - https://lnkd.in/dSr77EcE
5. Kafka crash course by Hussein Nasser 
 - https://lnkd.in/dDND2e6z

𝗛𝗼𝘄 𝗞𝗮𝗳𝗸𝗮 𝗶𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁𝗲𝗱 𝗮𝘁 𝗧𝗲𝗰𝗵 𝗚𝗶𝗮𝗻𝘁𝘀:

1. LinkedIn's Kafka Journey 
 - https://lnkd.in/d_QijMDk
2. Pinterest's Kafka at Scale
 - https://lnkd.in/dvV-8hun
3. Why Trello Chose Kafka
 - https://lnkd.in/gJhvX-dg
4. Salesforce's Kafka-Inspired Architecture
 - https://lnkd.in/gBH3bwGq
5. NYT's Publishing with Kafka
 - https://lnkd.in/gqcwF_zP
6. Yelp's Billions of Messages
 - https://lnkd.in/g7_fcfB7
7. Criteo's Kafka Upgrade 
 - https://lnkd.in/gwGx8wvq
8. Shopify's Kafka on Kubernetes
 - https://lnkd.in/gSdHqzb4
9. Yelp's Zero-Downtime Zookeeper Migration
 - https://lnkd.in/gHdphiQY
10. Uber's Kafka Reprocessing
 - https://lnkd.in/gti2xZuR
 - https://lnkd.in/gDF2S-vX
11. Dropbox's Kafka Throughput Limits
 - https://lnkd.in/gqpwjHzv
12. Walmart's Cost Orchestration
 - https://lnkd.in/gdtc5Az9
13. PayPal's Kafka Scaling
 - https://lnkd.in/gSxAVa89

𝗞𝗮𝗳𝗸𝗮 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀:

Basic Level:
1. What is Apache Kafka, and what are its core components?
2. Explain the difference between a topic, partition, and segment.
3. How does Kafka ensure message ordering?
4. What is a consumer group in Kafka?

Intermediate Level:
5. How does Kafka achieve fault tolerance? 
6. Explain Kafka's partitioning strategy and how it impacts performance.
7. Describe Kafka's consumer offset management.

Advanced Level:
8. Explain the concept of exactly-once semantics (EOS) in Kafka.
9. How would you monitor and optimize Kafka performance in a production environment? 
10. How would you design a Kafka-based system to guarantee data consistency in the event of node failures?

============================
20 recently asked 𝗞𝗔𝗙𝗞𝗔 interview questions.

- How do you create a topic in Kafka using the Confluent CLI?
- Explain the role of the Schema Registry in Kafka.
- How do you register a new schema in the Schema Registry?
- What is the importance of key-value messages in Kafka?
- Describe a scenario where using a random key for messages is beneficial.
- Provide an example where using a constant key for messages is necessary.
- Write a simple Kafka producer code that sends JSON messages to a topic.
- How do you serialize a custom object before sending it to a Kafka topic?
- Describe how you can handle serialization errors in Kafka producers.
- Write a Kafka consumer code that reads messages from a topic and deserializes them from JSON.
- How do you handle deserialization errors in Kafka consumers?
- Explain the process of deserializing messages into custom objects.
- What is a consumer group in Kafka, and why is it important?
- Describe a scenario where multiple consumer groups are used for a single topic.
- How does Kafka ensure load balancing among consumers in a group?
- How do you send JSON data to a Kafka topic and ensure it is properly serialized?
- Describe the process of consuming JSON data from a Kafka topic and converting it to a usable format.
- Explain how you can work with CSV data in Kafka, including serialization and deserialization.
- Write a Kafka producer code snippet that sends CSV data to a topic.
- Write a Kafka consumer code snippet that reads and processes CSV data from a topic.

𝗚𝗲𝘁 𝘁𝗵𝗲 𝗙𝘂𝗹𝗹 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗽𝗿𝗲𝗽 𝗸𝗶𝘁 𝗳𝗼𝗿 𝗗𝗮𝘁𝗮 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿𝘀 𝗵𝗲𝗿𝗲 -
https://lnkd.in/gNH-trFm

================================


𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐅𝐫𝐞𝐬𝐡𝐞𝐫𝐬:

1. What are the advantages of using Spring Boot?
2. What are the Spring Boot key components?
3. Why Spring Boot over Spring?
4. What is the starter dependency of the Spring boot module?
5. How does Spring Boot works?
6. What does the @SpringBootApplication annotation do internally?
7. What is the purpose of using @ComponentScan in the class files?
8. How does a Spring Boot application get started?
9. What are starter dependencies?
10. What is Spring Initializer?
11. What is Spring Boot CLI and what are its benefits?
12. What are the most common Spring Boot CLI commands?


𝐀𝐝𝐯𝐚𝐧𝐜𝐞𝐝 𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬:

13. What Are the Basic Annotations that Spring Boot Offers?
14. What is Spring Boot dependency management?
15. Can we create a non-web application in Spring Boot?
16. Is it possible to change the port of the embedded Tomcat server in Spring Boot?
17. What is the default port of Tomcat in Spring Boot?
18. Can we override or replace the Embedded Tomcat server in Spring Boot?
19. Can we disable the default web server in the Spring Boot application?
20. How to disable a specific auto-configuration class?
21. Explain @RestController annotation in Spring Boot?
22. What is the difference between @RestController and @Controller in Spring Boot?
23. Describe the flow of HTTPS requests through the Spring Boot application?
24. What is the difference between RequestMapping and GetMapping?
25. What is the use of Profiles in Spring Boot?
26. What is Spring Actuator? What are its advantages?
27. How to enable Actuator in Spring Boot application?
28. What are the actuator-provided endpoints used for monitoring the Spring Boot application?
29. How to get the list of all the beans in your Spring Boot application?
30. How to check the environment properties in your Spring Boot application?
31. How to enable debugging log in the Spring Boot application?
32. Where do we define properties in the Spring Boot application?
33. What is Dependency Injection?
34. What is an IOC container? 


====================================

Sharing below the Spring boot JPA Roadmap and learning Resources:

0. Understanding of Spring boot JDBC 
 
1. JPA Architecture 
- Overview of JPA as a specification
- Components: EntityManager, EntityManagerFactory, and Persistence Context
- JPA’s role in the ORM ecosystem
- JPA life cycle and persistence contexts (transaction-scoped and extended)
- JPA provider (e.g., Hibernate) roles
 
2. JPA vs Hibernate vs JDBC 
- JPA as a specification vs Hibernate as an implementation
- Direct JDBC vs ORM (which one is fast)
 
3. Setup 
- Adding dependencies (Maven and Gradle)
- Configuring application.properties for database connection
- Initializing EntityManagerFactory and EntityManager
- Creating a Spring Boot project with JPA dependencies
 
4. In-memory DB, MySQL, and Hibernate Configuration
- Setting up an in-memory(H2) or MySql database 
- Hibernate configuration properties in application.properties
 
5. Mapping Classes to Tables
- Basics of @Entity and @Table annotations
- Mapping Java class fields to database columns
 
6. Entity Annotations and Lifecycle
- @Entity and its essential role in JPA
- Entity lifecycle states: transient, managed, detached, removed
- Callbacks with @PrePersist, @PostPersist, @PreUpdate, @PostUpdate
 
7. Annotations: 
- @Id for primary keys
- @GeneratedValue and ID generation strategies 
- @SequenceGenerator and @TableGenerator usage
- Column properties with @Column
- Table configurations with @Table
 
8. Basic CRUD Operations
- Creating CRUD repositories (CrudRepository, JpaRepository)
- Basic methods: save, findById, deleteById
 
9. Custom Queries
- Defining custom queries with method names
- Using @Query for JPQL queries
 
10. Criteria Queries
- Overview of the Criteria API
- Creating dynamic queries programmatically
- Named parameters in criteria queries
- Handling native queries with CriteriaBuilder
 
11. Transactions 

12. Relationships:
- Overview of association types in JPA
 One-to-One: Mapping @OneToOne unidirectional and bidirectional
One-to-Many: Using @OneToMany with mappedBy and cascade
Many-to-One: Configuring @ManyToOne
Many-to-Many: Using @ManyToMany with join tables
- Unidirectional vs. bidirectional mappings
 
13. Pagination and Sorting
- Using Pageable and PageRequest for pagination
- Sorting options (Sort class)
- Pagination strategies for large datasets
 
14. Audit Logging
- Using @CreatedDate and @LastModifiedDate
- @CreatedBy and @LastModifiedBy for user tracking
- Enabling JPA auditing in Spring Boot
 
15. DTO Projections
- Overview of DTO projections for read-only views
- Using @Query for DTO-based projections
 
16. Lazy vs. Eager Loading

17. Caching Levels (First and Second)

Learning Resource:
Youtube:
Spring boot playlist: https://lnkd.in/gz2A5ih2

============================
Kafka Interview Questions

𝗕𝗮𝘀𝗶𝗰 𝗟𝗲𝘃𝗲𝗹:

• What is Apache Kafka, and what are its core components?
• Explain the difference between a topic, partition, and segment.
• How does Kafka ensure message ordering?
• What is a consumer group in Kafka?
• What is Kafka's replication factor, and why is it important?

𝗜𝗻𝘁𝗲𝗿𝗺𝗲𝗱𝗶𝗮𝘁𝗲 𝗟𝗲𝘃𝗲𝗹:

• How does Kafka achieve fault tolerance?
• Explain Kafka's partitioning strategy and how it impacts performance.
• What is Kafka retention policy, and how does it work?
• Describe Kafka's consumer offset management.
• How can Kafka handle backpressure in real-time data processing?

𝗔𝗱𝘃𝗮𝗻𝗰𝗲𝗱 𝗟𝗲𝘃𝗲𝗹:

• Explain the concept of exactly-once semantics (EOS) in Kafka.
• How would you monitor and optimize Kafka performance in a production environment?
• Describe how Kafka handles leader election for partitions.
• What are the challenges of using Kafka in a multi-datacenter setup?
• How would you design a Kafka-based system to guarantee data consistency in the event of node failures?

𝗚𝗲𝘁 𝘁𝗵𝗲 𝗙𝘂𝗹𝗹 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗽𝗿𝗲𝗽 𝗸𝗶𝘁 𝗳𝗼𝗿 𝗗𝗮𝘁𝗮 𝗘𝗻𝗴𝗶𝗻𝗲𝗲𝗿𝘀 𝗵𝗲𝗿𝗲 -
https://lnkd.in/gNH-trFm

===========================

Java Interview Questions for Experienced Developers 

1. Differentiate between Volatile and Transient Variable in Java.
2. Differentiate between the Vector and ArrayList collections in Java.
3. How is Collection different from Collections in Java?
4. Discuss Dependency Injection and its significance in Object-Oriented Programming.
5. Can you write code for representing thread-safe singleton patterns in Java?
6. What is the importance of the hashCode() and equals() contract?
7. How is the classpath variable different from the path variable?
8. In a multi-threaded environment, can someone use a HashMap?
9. How would you help a colleague with less Java experience who has trouble serializing a class?
10. What is the best possible way to call the wait() method – using the if construct or the loop construct?
11. Can we use HashMap in a multi-threaded environment?
12. Distinguish between ArrayList and Vector in Java.
13. Briefly discuss the Factory Design pattern.
14. What will happen if you run 1.0/0.0?
15. Is it possible to override a method to throw a RuntimeException from throwing a NullPointerException in the parent class?
16. Is there any difference in defining or creating a String by using a String literal and using the new() operator?
17. Distinguish between String creation using the new() operator and String literal.
18. Write some important features of Java 8.
19. In the Singleton Pattern, what is the significance of double-checked locking?
20. Is it necessary to declare all immutable objects as final?
21. What do you know about the Factory Design Pattern in Java?
22. Is it possible to overload the main method?
23. Differentiate between Enumeration and Iterator.
24. Describe EnumSet.
25. Explain SerialVersionUID.
26. In hashing-based collections, state the default size of the load factor.
27. Differentiate between fail-safe and fail-fast.
28. Discuss IdentityHashMap.
29. Mention the benefits and limitations of Spring AOP.
30. What is the Properties class?
31. Mention 5 best practices used with threads.
32. When should one use the Flyweight pattern?
33. What is the difference between SAX and DOM parsers?
34. How does Garbage Collection work in Java?
35. What are weak references in Java?
36. How can you prevent Deadlock in Java?
37. Explain the Template Method design pattern.
38. What are Java Memory Leaks?
39. What are ThreadLocal variables?
40. How does Java handle stack and heap memory?


More interview questions 
1. https://lnkd.in/dMgxnstS
2. https://lnkd.in/dzqENJ8E
3. https://lnkd.in/dqnvHBGz
4. https://lnkd.in/dt8eEEqK
5. https://lnkd.in/dHU7G9n3

Summary of #Java 8,9,11,12,13,14,15,16,17,18,19 features.
All features in a single post. #share #like #follow

#Java 19 Features :
- Record Patterns (Preview)
- Linux/RISC-V Port
- Foreign Function & Memory API (preview)
- Virtual Threads (Preview)
- Vector API (Fourth Incubator)
- Structured Concurrency (Incubator)
- Pattern Matching for switch (Third Preview)

#Java 18 Features:
- UTF-8 by Default
- Simple Web Server
- Code Snippets in Java API Doc
- Reimplement Core Reflection with Method Handles
- Vector API
- Internet-Address Resolution SPI
- Foreign Function & Memory API
- Pattern Matching for switch

#Java 17 Features (Long Term Support) :
- Restore Always-Strict Floating-Point Semantics
- Enhanced Pseudo-Random Number Generators
- New macOS Rendering Pipeline
- macOS/AArch64 Port
- Deprecate the Applet API for Removal
- Strongly Encapsulate JDK Internals
- Pattern Matching for switch

#Java 16 Features:
- Vector API
- Enable C++14 Language Features
- Migrate from Mercurial to Git
- Migrate to GitHub
- Concurrent Thread-Stack Processing
- Unix-Domain Socket Channels
- Alpine Linux Port
- Elastic Metaspace
- Windows/AArch64 Port

#Java 15 Features
- Sealed Classes and Interfaces
- EdDSA Algorithm
- Hidden Classes
- Pattern Matching for instanceof
- Removed Nashorn JavaScript Engine
- Reimplement the Legacy DatagramSocket API
- Records (Second Preview)
- Text Blocks become a standard feature

#Java 14 Features
– Pattern Matching for instanceof
– Text Blocks
– Helpful NullPointerExceptions
– Records
– Switch Expressions
– Packaging Tool
– NUMA-Aware Memory Allocation for G1
– JFR Event Streaming
– Non-Volatile Mapped Byte Buffers
– Remove the Pack200 Tools and API

#Java 13 Features:
– Text Blocks (Preview)
– Switch Expressions Enhancements (Preview)
– Reimplement the Legacy Socket API
– Dynamic CDS Archive
– ZGC: Uncommit Unused Memory
– FileSystems.newFileSystem() Method
– DOM and SAX Factories with Namespace Support

#Java 12 Features:
- Collectors.teeing() in Stream API
- String API Changes
- Files.mismatch(Path, Path)
- Compact Number Formatting
- Support for Unicode 11
- Switch Expressions (Preview)

#Java 11 Features (Long Term Support):
- HTTP Client API
- Launch Single-File Programs Without Compilation
- String API Changes
- Collection.toArray(IntFunction)
- Files.readString() and Files.writeString()
- Optional.isEmpty()

#Java 9 Features:
- Java platform module system
- Interface Private Methods
- HTTP 2 Client
- JShell
- Platform and JVM Logging
- Process API Updates
- Collection API Updates
- Improvements in Stream API
- Multi-release JAR Files
- @Deprecated Tag Changes
- Stack Walking

#Java 8 Features (Long Term Support):
- Lambda expression
- Stream API
- Functional interface
- Default and static methods
- Optional class
- Nashorn – JavaScript runtime engine
- Unsigned Integer Arithmetic
- Repeating annotations
- New Date and Time API

=======================

1️⃣ What is the difference between Java 8’s Optional and traditional null checks?
2️⃣ Explain the purpose of functional interfaces in Java.
3️⃣ What is the difference between Stream.forEach() and Collection.forEach()?
4️⃣ How does the CompletableFuture class improve asynchronous programming?
5️⃣ What are default and static methods in interfaces?
6️⃣ How does the var keyword work in Java 10?
7️⃣ What are records in Java, and how do they simplify data classes?
8️⃣ What is the sealed keyword in Java, and how does it enhance inheritance?
9️⃣ How does the Pattern Matching feature improve instanceof checks?
🔟 What are the improvements in garbage collection in Java 11+?
👉 Stay tuned for Day 6: JVM & Performance Optimization!


====================================

𝐈𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭 𝐂𝐨𝐧𝐜𝐞𝐩𝐭𝐬: 𝐉𝐚𝐯𝐚, 𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 , 𝐋𝐋𝐃 & 𝐇𝐋𝐃 

🔹 𝘑𝘢𝘷𝘢 - 𝘊𝘰𝘳𝘦 𝘵𝘰 𝘈𝘥𝘷𝘢𝘯𝘤𝘦𝘥 𝘊𝘰𝘯𝘤𝘦𝘱𝘵𝘴

𝐉𝐚𝐯𝐚 𝐅𝐮𝐧𝐝𝐚𝐦𝐞𝐧𝐭𝐚𝐥𝐬
✅ 4 Pillars of OOP
✅ Procedural vs OOPs Programming
✅ JDK vs JRE vs JVM
✅ Classes & Objects
✅ Variables & Data Types
✅ String Pool & Immutability
✅ Access Specifiers
✅ Type Casting
✅ Method Overloading vs Overriding
✅ Pass by Value vs Pass by Reference
✅ Garbage Collection
✅ Constructors & Destructors
✅ Operators & Expressions
✅ Control Flow Statements

𝐀𝐝𝐯𝐚𝐧𝐜𝐞𝐝 𝐉𝐚𝐯𝐚 
✅ Multithreading & Concurrency
✅ Exception Handling
✅ Generic Programming
✅ Java Collections Framework
✅ Functional Interfaces & Lambda Expressions
✅ Stream APIs

🔹 𝘚𝘱𝘳𝘪𝘯𝘨 𝘉𝘰𝘰𝘵 - 𝘉𝘢𝘴𝘪𝘤𝘴 𝘵𝘰 𝘈𝘥𝘷𝘢𝘯𝘤𝘦𝘥

✅ Spring Boot Fundamentals
✅ REST APIs & Microservices Spring Data ✅ JPA & Hibernate
✅ Spring Security & JWT
✅nCircuit Breaker (Resilience4J, Hystrix)
✅ Spring Cloud for Microservices
✅ Kafka Integration
✅ Docker & Kubernetes with Spring Boot

🔹 𝘓𝘰𝘸-𝘓𝘦𝘷𝘦𝘭 𝘋𝘦𝘴𝘪𝘨𝘯 (𝘓𝘓𝘋) 

𝐃𝐞𝐬𝐢𝐠𝐧 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬 & 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬
✅ SOLID Principles 
✅ Strategy Design Pattern
✅ Observer Pattern
✅ Decorator Pattern
✅ Factory Pattern
✅ Abstract Factory Pattern
✅ Proxy Design Pattern
✅ Null Object Pattern
✅ Adapter Design Pattern
✅ Builder Design Pattern
✅ Facade Design Pattern
✅ Bridge Design Pattern
✅ Flyweight Design Pattern
✅ Command Design Pattern
✅ Iterator Design Pattern
✅ Mediator Design Pattern
✅ Visitor Design Pattern
✅ Memento Design Pattern
✅ MVC Design Pattern
✅ Chain of Responsibility Pattern

𝐑𝐞𝐚𝐥-𝐖𝐨𝐫𝐥𝐝 𝐋𝐋𝐃 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧𝐬
Parking Lot
Snake and Ladder
Elevator System
Car Rental System
Logging System
Tic-Tac-Toe
BookMyShow
Vending Machine
ATM Machine
Chess Game
File System
Splitwise (+ Simplification Algorithm)
Cricbuzz
Zepto
Apply Coupon Code System
Payment Gateway System
Object Pool Design Pattern

🔹 𝘏𝘪𝘨𝘩-𝘓𝘦𝘷𝘦𝘭 𝘋𝘦𝘴𝘪𝘨𝘯 (𝘏𝘓𝘋)

𝐂𝐨𝐫𝐞 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐂𝐨𝐧𝐜𝐞𝐩𝐭𝐬
✅ Network Protocols
✅ CAP Theorem 
✅ Microservices Design Patterns
✅ Scaling from 0 to Millions of Users
✅ Consistent Hashing 
✅ Back-of-the-Envelope Estimation

𝐑𝐞𝐚𝐥-𝐖𝐨𝐫𝐥𝐝 𝐇𝐋𝐃 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧𝐬
Design URL Shortening System
WhatsApp System Design
Zoom Video Calling System
Kafka (Messaging Queue) System Design
Rate Limiter
Idempotent POST API
High Availability System
Key-Value Store (Database Design)

𝐃𝐢𝐬𝐭𝐫𝐢𝐛𝐮𝐭𝐞𝐝 𝐒𝐲𝐬𝐭𝐞𝐦𝐬 & 𝐒𝐞𝐜𝐮𝐫𝐢𝐭𝐲
✅ Proxy vs Reverse Proxy
✅ Load Balancers & Algorithms
✅ Distributed Caching
✅ Distributed Transactions
✅ Database Indexing
✅ Distributed Concurrency Control
✅ Distributed Locking
✅ OAuth 2.0
✅ Symmetric vs Asymmetric Encryption
✅ JWT 
✅ API Gateway
✅ Microservices Architecture
✅ Service Mesh
✅ DNS


===================================

Mostly asked API interview questions:
Q1.What is the role of headers in API testing?
Answer: Headers in API testing play an important role in providing additional information that is not included in the request body. Headers are important in controlling the behavior of the server in handling the request, providing authentication information, or providing metadata about the request or response.

Q2.What is the purpose of the request and response headers in API testing?
Ans: The request headers are used to specify a content type, caching, authentication, sending pdf files, etc. The response header can provide information about the Content Details, Authentication Status, Rate Limiting(Notify the client about API usage limits Example: X-RateLimit-Remaining: 100.), server, caching, etc.

Q3.How do you prioritize API test cases for regression testing?
Ans: 1. Select test cases with frequent defects.
2. Select test cases with critical functionalities.
3. Select test cases with frequent code changes.
4 . Cover end-to-end test flows.
5 . Select a risk-based testing approach.
6. Test Endpoints With High Traffic (ex: Search, user profile fetching, or real-time notification APIs.
7 . Validate Integration Points.(Focus on APIs with multiple dependencies or integrations with external services, as these have a higher chance of failing due to external changes.

====================================

1) Java program to remove duplicates characters from given String. 
2) Program Remove the second highest element from the HashMap. 
3) Java program to Generate prime numbers between 1 & given 4
number 
4) How to find the missing values from a sorted array. 
5) Java program to input name, middle name and surname of a 
person and print only the initials. 
5) Program to Print all Treemap elements? 
6) What is a singleton Design Pattern? How do you implement that in your framework? 
7) Write the Top 5 test cases for Booking Coupons. 
8) What is serialization and deserialization? 
9) What is the Difference between status codes 401 and 402? 1
10) Difference between selenium 3 and selenium 4? 
11) What is delegate in Java and where do you use Delegate in your Framework? 
12) How many maximum thread-pool can you open in the TestNG? 
13) What are the Major challenges that come into the picture when you do parallel testing using TestNG and Grid? 
14) How do you integrate your automation framework with the Jenkins pipeline? 
15) What will happen if we remove the main method from the java program? 
16) What is the component of your current Project? 
17) How do you pass parameters in TestNG? 
18) Write the logic of retrying the failed test case with a minimum 3 numbers of time in Automation Testing. Which Interface do you use for it? 
19) What is the OOPs concept in java? 
20) What is encapsulation? 
21) What is Polymorphism? 
22) Difference Between Classes and Objects? 
23) What is collection in Java? 
24) What is out in System.out.println? 
25) In How many ways can we create an object? 
26) Why is Java not 100% Object-oriented?
27) Can we make a constructor as Static? 
28) How to convert a JSON object to a java object using Jackson? 
29) What is the difference between Abstraction Class and Interfaces? 
30) Difference between String, StringBuilder, and Stringbuffer? 
31) What are other immutable classes in Java apart from String? 
32) Difference between TreeMap and HashMap? 
33) How do you set priorities for test automation, which test needs to be automated first? 
34) How do you set test case priorities for your team? 
35) What are the functional things you need to test on e-commerce sites? 

=====================================


 JPA & Hibernate Interview Questions for SDE1 💡


🔹 What is JPA? How is it different from Hibernate?
🔹 What is an entity in JPA?
🔹 @Entity Vs @Table
🔹 Explain the difference between @Id and @GeneratedValue.
🔹 Eager fetching Vs Lazy fetching.
🔹 Types of Relationships or mappings.
🔹 @JoinColumn
🔹 How does Hibernate manage caching?
🔹 Save() Vs Persist()
🔹 What is the N+1 select problem in Hibernate? How do you prevent it?
🔹 How do you implement Auditing in JPA?
🔹 @Transactional Annotation
🔹 Merge() Vs Update()
🔹 Explain Entity Lifecycle.
🔹 Explain JOIN FETCH Vs JOIN
🔹 get() Vs Load()
🔹 CascadeType (Persist, Remove, Merge, Refresh, Detach, All)
🔹 Is it mandatory to define a Primary Key when making an entity? If not, what happens to the table in your database?
🔹 What is database indexing? Types of indexing? Which data structures are underlined?
🔹 Primary Key Vs Candidate Key Vs Foreign Key.
🔹 If you apply indexing on all columns, what will happen? What will be the effect on Insert, Update, Delete operations?
🔹 SessionFactory Vs EntityManagerFactory
🔹 How many ways are there to write Hibernate Queries?


=====================================

1.Reverse a String.
2.Check if a String is Palindrome.
3.Find Factorial of a Number (Recursion & Iteration).
4.Check if a Number is Prime.
5.Print Fibonacci Series (Recursion & Iteration).
6.Swap Two Numbers Without Using a Third Variable.
7.Find GCD & LCM of Two Numbers.
#Array & #String_Programs
9.Find the Largest and Smallest Number in an Array.
10.Find the Second Largest Element in an Array.
11.Remove Duplicates from an Array.
#Reverse_an_Array
12.Check if Two Strings are Anagrams
13.Count the Occurrences of Each Character in a String
14.Find the First Non-Repeating Character in a String
#Sorting , #Searching_Algorithms
15.Bubble Sort, Selection Sort, Insertion Sort, Quick Sort, Merge Sort
16.Binary Search & Linear Search
17.Linked List & Data Structure Programs
#Reverse_a_Linked_List
18.Detect a Loop in a Linked List.
19.Find Middle Element of a Linked List.
20.Implement Stack & Queue Using an Array or Linked List.
 
21. Design a Singleton Class in Java.
22.Demonstrate Method Overloading & Overriding.
23.Create a Thread Using Runnable & Thread Class.
24.Implement Producer-Consumer Problem Using Threads.
25.Find the Number of Occurrences of a Word in a File.

=================================

𝐌𝐨𝐬𝐭 𝐀𝐬𝐤𝐞𝐝 𝐉𝐚𝐯𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬: 𝐏𝐚𝐫𝐭 - 2

𝐄𝐚𝐬𝐲 - 
 
• How is String immutable in Java? 
• What is a functional interface? 
• Can a constructor be private? 
• Which approach is better and why? 
 • String str = "Hello"; OR 
 • String str = new String("Hello"); 
• What is an anonymous class?

𝐌𝐞𝐝𝐢𝐮𝐦 -
 
• Where is a String stored in memory? 
• Is it necessary for an abstract class to have at least one abstract method? 
• Does 𝐜𝐨𝐧𝐜𝐚𝐭𝐞𝐧𝐚𝐭𝐢𝐨𝐧 create a new String? If yes: 
 • What happens to the old String objects? 
 • Can they cause memory issues? 
• Why do we use 𝐚𝐛𝐬𝐭𝐫𝐚𝐜𝐭 𝐜𝐥𝐚𝐬𝐬𝐞𝐬? 
• Can we instantiate a class containing an abstract method? 
• How to create an object of a class with a 𝐩𝐫𝐢𝐯𝐚𝐭𝐞 𝐜𝐨𝐧𝐬𝐭𝐫𝐮𝐜𝐭𝐨𝐫?

𝐇𝐚𝐫𝐝 - 
 
• How to create an 𝐢𝐦𝐦𝐮𝐭𝐚𝐛𝐥𝐞 𝐜𝐥𝐚𝐬𝐬 in Java? 
• How to implement a 𝐒𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧 𝐜𝐥𝐚𝐬𝐬? What are its real-world applications? 
• Can we define methods in an interface? If yes, how? 
• What is a 𝐥𝐚𝐦𝐛𝐝𝐚 𝐞𝐱𝐩𝐫𝐞𝐬𝐬𝐢𝐨𝐧, and why is it used? 
• What is the difference between 𝐂𝐨𝐦𝐩𝐚𝐫𝐚𝐛𝐥𝐞 and 𝐂𝐨𝐦𝐩𝐚𝐫𝐚𝐭𝐨𝐫? 
• What are the key features of Java 8? 
• Which provides complete abstraction and why? 
 • Abstract class 
 • Interface 
• What happens if the 𝐫𝐮𝐧() method is called directly on a running thread? 
• What is the purpose of a 𝐝𝐚𝐞𝐦𝐨𝐧 𝐭𝐡𝐫𝐞𝐚𝐝?


========================================

Java Developer Interview Questions for Experienced
#realtime #java #scenario #interview #questions
1. You need to prevent API abuse by implementing a rate limiter in Spring Boot.
· How would you implement it?
· Which algorithms would you use? (Token Bucket vs. Leaky Bucket)
· How can Redis help in rate limiting?
2. Your system expects 1M+ requests per second during peak load.
· How do you scale your system?
· What caching mechanisms would you implement?
· How do you handle sudden traffic spikes?

3. Users are uploading large files (1GB+), and the service is slowing down.

· What’s the best way to handle file uploads efficiently?
· Would you use S3, MinIO, or another storage solution?
· How to implement a resumable upload?

4. Identify and fix the memory leak in the following code:
class MemoryLeakExample {
 private static List<String> cache = new ArrayList<>();

 public void addData() {
 for (int i = 0; i < 1000000; i++) {
 cache.add("Data-" + i);
 }
 }
}
· What is wrong with this code?
· How do you fix the memory leak?

5. The following code is not thread-safe. Why?

class Counter {
 private int count = 0;

 public void increment() {
 count++;
 }
}
· What’s wrong with this implementation?
· How would you make it thread-safe?

6. Your REST API is slow. Fix this code:

@GetMapping("/users")
public List<User> getAllUsers() {
 return userRepository.findAll();
}
· Why is this method slow for large datasets?
· How can you optimize it using pagination?

========================================

#InterviewQuestions 

1. Reverse the given string (Given: payal, Expected: layap)
2. Reverse each word in the string (Given:payal shirish mehta Expected: layap hsisihs athem)
3. Reverse Number (Given: 45321 Expected: 12354)
4. occurrence of the word with frequency (Given: payal shirish mehta payal Expected: Payal-2, Shirish-1, mehta-1)
5. Occurrence of character with frequency (Given: payal mehta Expected: p-1,a-3,y-1,l-1,m-1,e-1,h-1,t-1)
6. Largest word in the string(Given: payal shirish mehta Expected:shirish)
7. Smallest word in the string(Given: payal mehta shah Expected: shah)
8. Second Max number (Given: 10,12,18,11,9,7,20 Expected: 18)
9. Second Min number (Given: 10,12,18,11,9,7,20 Expected: 9)
10. Add $ after characters in String(Given: tomorrow Expected: t$m$$rr$$$)

========================================

Java Developer Interview Questions for Experienced
#java #interview #preparation
1. You need to handle 1 million requests per second. How would you scale your backend architecture?
2. If you are building an order management system, how would you design the services? (Database choices, API interactions, scalability)
3. Design a simple service that asynchronously processes tasks using Spring Boot.
4. You have a distributed system where one Microservice must call another but should retry on failure. How would you implement this in Spring Boot?
5. You deployed a Spring Boot service, but it crashes with an "Out of Memory" error. How do you debug this?
6. Your Spring Boot REST API, which fetches data from a database, suddenly becomes slow. The response time has increased from 100ms to 3 seconds.
7. Your Spring Boot microservice is running on Kubernetes and after a few hours, it crashes with OutOfMemoryError.
· What are the possible causes of memory leaks in Java?
· How to find which objects are causing the memory leak?
· How to use a profiler (like JVisualVM, YourKit) to detect leaks?

8. One of your microservices has started consuming high CPU (90%), even though the incoming traffic is normal.
· How to investigate and identify the root cause?
· What could cause a thread to enter an infinite loop?
· How can you profile CPU usage in a running application?

9. You start your Spring Boot application, but it fails with a "BeanCurrentlyInCreationException" due to a circular dependency.
· How to debug and fix this issue?
· What Spring mechanisms help break circular dependencies?

10. Your Spring Boot app occasionally freezes and stops processing requests.
· How to detect a deadlock in Java?
· How can you use jstack to diagnose the issue?
· How can you avoid deadlocks in database transactions?

============================================

Interview Experience – Java Developer (L1 and L2 Questions)

L1 Interview Questions

* Introduction (as usual)
* Explain the internal working of HashMap in Java.
* What are wrapper classes? What are their advantages?
* How does indexing work in MongoDB?
* Difference between @RestController and @Controller in Spring.
* What are REST services?
* Inner join vs Left join in SQL.
* Compare ArrayList and LinkedList in Java.
* What is a Functional Interface? (Default functional interfaces in Java)
* Explain idempotent vs non-idempotent operations in REST.
* How to implement a Singleton class in Java?
* Difference between an interface and an abstract class.
* Code to get the frequency of each string from a list of strings.
* Types of Stream operations in Java (Terminal vs Intermediate operations).
* How to create an Immutable class in Java?
* Difference between WHERE and HAVING clauses in SQL.
* Can we use default and static methods inside a functional interface?

L2 Interview Questions

* Introduction (as usual)
* What is the CAP theorem?
* Which two principles of the CAP theorem does MongoDB prioritize?
* How to create a custom HashMap class with get and put method implementations?
* Detailed explanation of the working of HashMap.
* Write a signature for an API to handle login functionality for an application.
* How to decide between using an RDBMS or a NoSQL database?
* Explain isolation in the context of ACID properties.

===========================================

** EXCEPTIONS in java interview questions **
1. Difference between error and exception ?
2. What happens if subclass exception is listed after a superclass exception (Example: Parent class method declares it to throw IOException and Child class method declared it to throw FileNotFoundException) ?
3. Difference between final, finally and finalize ?
4. Tell me about Control flow in try-catch OR try-catch-finally
5. Assume an Exception occurred in try-block is not handled in catch block. What happens here ?
6. If an exception occurs in the try block but is not handled in the catch block, and then there is a finally block followed by remaining code, what happens in this case ? Is the exception thrown first and then the finally block executed, or does the finally block get executed first and the exception thrown afterward?
7. Which among there are valid combinations ? (a) try (b) try - catch (c) try - finally (d) try - catch - finally
8. Can I use throws without using try-catch ?
9. Difference between throw and throws ?
10. I have a try block within a try block. But I have catch block for the outer try block. Will the program gets executed ?

==========================================

#SpringBoot Interview, Questions

𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬 𝐟𝐨𝐫 𝐅𝐫𝐞𝐬𝐡𝐞𝐫𝐬:
1. What are the advantages of using Spring Boot?
2. What are the Spring Boot key components?
3. Why Spring Boot over Spring?
4. What is the starter dependency of the Spring boot module?
5. How does Spring Boot works?
6. What does the @SpringBootApplication annotation do internally?
7. What is the purpose of using @ComponentScan in the class files?
8. How does a Spring Boot application get started?
9. What are starter dependencies?
10. What is Spring Initializer?
11. What is Spring Boot CLI and what are its benefits?
12. What are the most common Spring Boot CLI commands?

𝐀𝐝𝐯𝐚𝐧𝐜𝐞𝐝 𝐒𝐩𝐫𝐢𝐧𝐠 𝐁𝐨𝐨𝐭 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬:
13. What Are the Basic Annotations that Spring Boot Offers?
14. What is Spring Boot dependency management?
15. Can we create a non-web application in Spring Boot?
16. Is it possible to change the port of the embedded Tomcat server in Spring Boot?
17. What is the default port of Tomcat in Spring Boot?
18. Can we override or replace the Embedded Tomcat server in Spring Boot?
19. Can we disable the default web server in the Spring Boot application?
20. How to disable a specific auto-configuration class?
21. Explain @RestController annotation in Spring Boot?
22. What is the difference between @RestController and @Controller in Spring Boot?
23. Describe the flow of HTTPS requests through the Spring Boot application?
24. What is the difference between RequestMapping and GetMapping?
25. What is the use of Profiles in Spring Boot?
26. What is Spring Actuator? What are its advantages?
27. How to enable Actuator in Spring Boot application?
28. How to get the list of all the beans in your Spring Boot application?
29. How to enable debugging log in the Spring Boot application?
30. Where do we define properties in the Spring Boot application?
31. What is Dependency Injection?
32. What is an IOC container?

Want to be Java SpringBoot developer?
Do this topics 👇
 1. Dependency Injection (DI) and Inversion of Control (IoC)
 2. Bean lifecycle and scopes
 3. ApplicationContext and BeanFactory
 4. XML vs. Java-based Configuration
 5. Annotations: @Component, @Autowired, @Qualifier, @Value
 6. Pointcuts, Advice, Joinpoints, Aspects
 7. Common AOP annotations: @Aspect, @Before, @After
 8. JDBC Template
 9. Spring ORM with Hibernate
 10. Transactions: Programmatic vs Declarative
 11. Spring Boot starters and dependencies
 12. Auto-configuration
 13. Embedded servers (Tomcat, Jetty)
 14. Spring Boot Actuator
 15. DispatcherServlet flow
 16. RESTful Web Services
 17. RequestMapping: @GetMapping, @PostMapping, etc.
 18. Exception handling with @ControllerAdvice
 19. Authentication and Authorization
 20. Security filters and interceptors
 
 ===================================
 
 #java Important questions for #AutomationTester both Fresher and Experience 👇👇

1️⃣ Core Java Basics

1. What are OOP principles? Explain Encapsulation, Inheritance, Polymorphism, and Abstraction.
2. What is the difference between Class and Object in Java?
3. What is the difference between Method Overloading and Method Overriding?
4. What is the difference between Abstract Class and Interface?
5. What is the use of the final, finally, and finalize keywords?
Explain the static keyword in Java.
6. What are constructors in Java? Can a constructor be private?
7. What is the difference between equals() and == in Java?
8. What is the difference between String, StringBuilder, and StringBuffer?
9. How does Java handle memory management (Heap, Stack, Garbage Collection)?

2️⃣ Collections & Data Structures

1. What is Java Collections Framework?
2. Explain the difference between ArrayList and LinkedList.
3. What is the difference between HashMap and HashSet?
4. What is the difference between HashMap, TreeMap, and LinkedHashMap?
5. What is the difference between List, Set, and Queue?
6. How does HashMap handle collisions internally?
7. What is the use of the Iterator in Java?
8. How do you sort a list of objects using Comparable and Comparator?
9. What is ConcurrentHashMap and how is it different from HashMap?
Explain the difference between fail-fast and fail-safe iterators.

3️⃣ Exception Handling & Multithreading

1. What is Exception Handling? Explain try-catch-finally with an example.
2. What is the difference between Checked and Unchecked Exceptions?
3. What is the difference between throw and throws?
4. What are the different types of exceptions in Selenium/WebDriver?
5. What is multithreading? How is it different from parallel processing?
6. What are synchronized blocks and methods in Java?
7. Explain Thread.sleep() vs Wait() vs Notify().
8. What is Deadlock in Java, and how can it be avoided?
9. What is Callable and Future in Java?
10.What are Lambda Expressions, and how are they useful in automation?
 
 ====================================
 
  Core Java Questions
 1. What is the difference between HashMap and ConcurrentHashMap, and how does Java handle collisions?
 2. Explain the concept of fail-fast and fail-safe iterators in Java.
 3. How does Java manage garbage collection, and what are the differences between G1 GC and CMS?
 4. How would you implement an immutable class with mutable fields?
 5. What are soft references, weak references, and phantom references in Java?

 Multithreading and Concurrency
 1. What’s the difference between synchronized blocks and ReentrantLock?
 2. How would you prevent deadlocks in a multithreaded application?
 3. Explain ThreadLocal and its use cases.
 4. What are CountDownLatch and CyclicBarrier, and when would you use each?
 5. Implement a producer-consumer problem using Java’s BlockingQueue.

 Spring Boot and Microservices Questions
 1. How does Spring Boot’s auto-configuration work internally?
 2. What is the role of Spring Boot Actuator?
 3. How would you secure a REST API using Spring Security and JWT?
 4. Explain circuit breakers and how you’d implement them using Hystrix in a microservices architecture.
 5. How do you handle versioning in REST APIs?

 Vert.x Framework Questions
 1. How does the Vert.x Event Bus work for inter-component communication?
 2. What’s the difference between Vert.x and traditional blocking frameworks like Spring Boot?
 3. How would you use Vert.x reactive programming to handle high-concurrency tasks?
 4. Explain how Vert.x handles non-blocking I/O and why it’s beneficial.
 5. How would you implement a distributed task scheduler using Vert.x and Redis?

 API and System Design Questions
 1. How would you design a rate-limiting mechanism for a public API?
 2. What’s the difference between synchronous APIs and asynchronous APIs?
 3. How would you design a payment gateway to handle high traffic?
 4. Explain the role of message queues like Kafka or RabbitMQ in a distributed system.
 5. How would you troubleshoot a failing API in production?

Key Topics to Master
 • Java Fundamentals: Collections, Streams, and Memory Management.
 • Multithreading: Thread synchronization, locks, and concurrency utilities.
 • Spring Boot & Vert.x: Microservices, APIs, and non-blocking frameworks.
 • System Design: Scalability, fault tolerance, and distributed systems.
 • Coding Proficiency: Algorithms, data structures, and problem-solving.
 
 =================================
 
 #SDET

1. If we have string String STS1 = "Java" and String STS2 ="Java", will it create new object?
2. What is String Pool memory and Heap memory in Java?
3. Why is String Immutable?
4. Write a program to reverse an array. Given {4,52,6} and print it is 6,2,5,4?
5. Difference between authentication and authorization?
6. Write SQL to find second highest salary with join?
7. Difference between API and WebServices?
8. What is Invocation count in TestNG?
9. Difference between Exception and error?
10. Write a Java program with Selenium to count broken link?
11. Write a Java program to combine 2 array and remove duplicate?
12. How to convert List into ArrayList and ArrayList into list?
13. Explain Collection Hierarchy?

====================================


Real time Core Java Interview Questions 
#corejava #java #super #this #interview #preparation
1. Can a constructor be private? In which scenarios is it useful?
2. What is the use of the super keyword? How is it utilized in a Spring Boot microservices architecture?
3. How does an interface differ from an abstract class? Provide an example where you implemented an interface in your project.
4. Can a Java class implement multiple interfaces? How does Spring handle multiple interface implementations in dependency injection?
5. How to use this() to call another constructor inside the same class?
6. Can this be used in a static method? Why or why not?
7. How did you use this in your Spring Boot project while handling dependency injection or model objects?
8. How to use super() to call a parent class constructor?
9. In your project, have you extended any classes where you needed super()? Explain with an example.
10. What happens if you don’t explicitly call super() in a constructor?
11. How does constructor chaining work in Java? Explain with an example.
12. What are the differences between default, parameterized, and copy constructors?
13. How does Spring Boot use constructors for dependency injection?
14. Can we call a constructor explicitly from another constructor? How?
15. What is a private constructor? How is it used in Singleton design patterns?
16. How did you use constructors in your Microservices project (Spring Beans, Models, or Controllers)?
=====================================================

𝐌𝐨𝐬𝐭 𝐀𝐬𝐤𝐞𝐝 𝐉𝐚𝐯𝐚 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬: 

𝐄𝐚𝐬𝐲 - 
 
• How is String immutable in Java? 
• What is a functional interface? 
• Can a constructor be private? 
• Which approach is better and why? 
 • String str = "Hello"; OR 
 • String str = new String("Hello"); 
• What is an anonymous class?

𝐌𝐞𝐝𝐢𝐮𝐦 -
 
• Where is a String stored in memory? 
• Is it necessary for an abstract class to have at least one abstract method? 
• Does 𝐜𝐨𝐧𝐜𝐚𝐭𝐞𝐧𝐚𝐭𝐢𝐨𝐧 create a new String? If yes: 
 • What happens to the old String objects? 
 • Can they cause memory issues? 
• Why do we use 𝐚𝐛𝐬𝐭𝐫𝐚𝐜𝐭 𝐜𝐥𝐚𝐬𝐬𝐞𝐬? 
• Can we instantiate a class containing an abstract method? 
• How to create an object of a class with a 𝐩𝐫𝐢𝐯𝐚𝐭𝐞 𝐜𝐨𝐧𝐬𝐭𝐫𝐮𝐜𝐭𝐨𝐫?

𝐇𝐚𝐫𝐝 - 
 
• How to create an 𝐢𝐦𝐦𝐮𝐭𝐚𝐛𝐥𝐞 𝐜𝐥𝐚𝐬𝐬 in Java? 
• How to implement a 𝐒𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧 𝐜𝐥𝐚𝐬𝐬? What are its real-world applications? 
• Can we define methods in an interface? If yes, how? 
• What is a 𝐥𝐚𝐦𝐛𝐝𝐚 𝐞𝐱𝐩𝐫𝐞𝐬𝐬𝐢𝐨𝐧, and why is it used? 
• What is the difference between 𝐂𝐨𝐦𝐩𝐚𝐫𝐚𝐛𝐥𝐞 and 𝐂𝐨𝐦𝐩𝐚𝐫𝐚𝐭𝐨𝐫? 
• What are the key features of Java 8? 
• Which provides complete abstraction and why? 
 • Abstract class 
 • Interface 
• What happens if the 𝐫𝐮𝐧() method is called directly on a running thread? 
• What is the purpose of a 𝐝𝐚𝐞𝐦𝐨𝐧 𝐭𝐡𝐫𝐞𝐚𝐝?

===================================================

#SDET
Top 15 SDET Java programs asked in SDET Interview

1. Reverse an array?
2. Remove duplicate from 2 array and merge and make it one?
3. Move all Zeros to left?
4. Find in string repeat character and its count?
5. Find that word is Palindrome?
6. Find min and max in array?
7. Reverse String?
8. How to Concat and Split String?
9. How to sum an array?
10. How to check Vowel?
11. Move Even to left?
12. Print Fibonacci?
13. Find missing number in array?
14. Find max and min with IF, you can use Collection?
15. How to sort array?


-===============================================

Top Array-Related Questions 

1. Sum of Elements Write a program to take an array of integers as input and calculate the sum of all elements in the array.

2. Find Maximum and Minimum Write a program to find the maximum and minimum values in an array of integers.

3. Reverse an Array Write a program to reverse the elements of an array without using an additional array.

4. Count Even and Odd Numbers Write a program to count the number of even and odd numbers in an array of integers.

5.Search an Element Write a program to search for an element in an array and return its, index. If the element is not found, display a message.

6. Frequency of Elements Write a program to count the frequency of each element in an array. Example: Input: [1, 2, 2, 3, 4, 4, 4] Output: 1: 1, 2: 2, 3: 1, 4: 3

7. Second Largest Element Write a program to find the second largest element in an array.

8. Rotate an Array Write a program to rotate an array to the right by a given number of steps. Example: Input: [1, 2, 3, 4, 5], Rotate by 2 Output: [4,5, 1, 2, 3]

9. Check Palindrome Array Write a program to check if an array is a palindrome. Example: Input: [1,2,3, 2, 1] Output: true 🪞 palindrome

10. Merge Two Arrays Write a program to merge two arrays into a single array.

=========================================

* MICROSERVICES interview questions in JAVA Part-II **
1. How can you verify that the application registers with the proper instance of the Eureka Server?
2. Is Spring Boot and Spring Cloud the same ?
3. Tell me how you implemented Spring Security in a microservice architecture ?
4. What are components of microservice ?
5. What is the SAGA Pattern ?
6. How do microservices communicate with each other ?
7. Where do you configure API gateway for your spring boot ?
8. What is Service Discovery in Microservices?
9. Tell me about service registration in microservices ?
10. How is Service lookup done ?

==========================================

Questions:
1. Can an interface have a constructor? Why or why not?
2. What is the significance of the default keyword in Java 8 interfaces?
3. Can a class implement multiple interfaces in Java? If yes, explain how.
4. Can an interface extend another interface? If so, what is the use case?
5. What happens if a class implements two interfaces with conflicting default methods?
6. Can you explain the difference between public, private, protected, and package-private access modifiers?
7. What is the purpose of the protected access modifier? Can you access a protected method from another package?
8. What is the default access level for a class, method, or variable if no access modifier is specified?
9. Can you access a private variable from a subclass?
10. What is a functional interface? Can you give an example?
11. Explain the concept of Lambda Expressions in Java 8. How do they improve code readability?
12. What is the Stream API in Java 8, and how is it different from a collection?
13. What is the difference between map() and flatMap() in Java 8 Streams?
14. How do you use the Optional class in Java 8 to avoid NullPointerException?
15. What are the major improvements introduced in java.time package in Java 8?
16. Can you create an instance of a class with only static methods? How would you call the methods?
17. What is the difference between a static method and a non-static method?
18. Can you access a non-static variable from a static method? Why or why not?
19. What is a static block in Java, and when is it executed?
20. How would you call a static method in another class?
21. Can a static variable be overridden by a subclass? Why or why not?

===============================================

1️⃣ Service Registry & Discovery
=> Helps services find and communicate with each other dynamically.
🔧 Tools: Eureka, Consul

2️⃣ API Gateway
=> Acts as a single entry point, handling request routing, authentication, and load balancing.
🔧 Tools: Zuul, Spring Cloud Gateway

3️⃣ Circuit Breaker
=> Prevents system-wide failures by cutting off requests to struggling services.
🔧 Tools: Resilience4j, Hystrix

4️⃣ Database Per Service
=> Each microservice gets its own database to maintain data isolation and prevent tight coupling.

5️⃣ Saga Pattern
=> Manages distributed transactions across multiple services via orchestration or choreography.
🔧 Tools: Camunda, Temporal

6️⃣ Strangler Fig Pattern
=> A safe way to migrate from a monolith to microservices—gradually replacing pieces instead of a risky big bang rewrite.

7️⃣ Event Sourcing
=> Stores every state change as an event, allowing for historical tracking and easier debugging.

8️⃣ CQRS (Command Query Responsibility Segregation)
=> Separates read and write operations for better scalability and performance.

9️⃣ Sidecar Pattern
=> Adds extra capabilities like logging, monitoring, or security without changing the main service.
🔧 Tools: Istio, Envoy

🔟 Publish-Subscribe (Pub-Sub)
=> Services communicate asynchronously, ensuring loose coupling and better scalability.
🔧 Tools: Kafka, RabbitMQ

More System Design Resources:
- https://lnkd.in/djypj5qx
- https://lnkd.in/dwe5YK68
- https://lnkd.in/dZhDXVEk
- https://lnkd.in/dbySYqss
- https://lnkd.in/dUEBepwc
- https://lnkd.in/dRK2HRzJ
- https://lnkd.in/d3gRmqWC
- https://lnkd.in/dQ-YZ_V2

===================================

1. Explain how polymorphism was used to calculate ETAs differently for normal and priority deliveries.
2. If a driver has to pick up vehicles from multiple locations, how would you implement route optimization using OOP?
3. What is the purpose of super() in your child class? Provide an example from your project.
4. How would you use the static keyword for utility functions in route optimization?
5. Write a constructor for the Driver class to initialize the driver object with essential details (name, availability, assigned route). Use this to differentiate between local and instance variables.
6. Can a static method access non-static variables? Why or why not?
7. Why is the super keyword used in constructors? Can you provide an example where super was used to extend functionality in your project?
8. What happens if a constructor doesn’t explicitly call super() in a child class?
9. In your project, if you wanted to add a new delivery service with additional features, how would inheritance be used?
Real time:
10. If two customers schedule pickups for the same time but only one driver is available, how would you prioritize one over the other? Implement this using OOP concepts.
11. If a driver has started their route but a high-priority pickup request is added, how would you re-optimize the existing route?
12. If the MySQL database becomes unavailable during scheduling, how would you ensure that requests are temporarily saved and retried later?
13. If a driver assigned to a route becomes unavailable mid-route, how would you dynamically reassign tasks to another driver?

====================================

1. What is Spring Boot, and how does it differ from the traditional Spring Framework?
2. What is the purpose of @̲𝚂̲𝚙̲𝚛̲𝚒̲𝚗̲𝚐̲𝙱̲𝚘̲𝚘̲𝚝̲𝙰̲𝚙̲𝚙̲𝚕̲𝚒̲𝚌̲𝚊̲𝚝̲𝚒̲𝚘̲𝚗̲ annotation?
3. Explain the concept of auto-configuration in Spring Boot.
4. What is the role of application.properties or application.yml in Spring Boot?
5. What are the advantages of using Spring Boot over traditional Spring applications?
6. What is the difference between @̲𝙲̲𝚘̲𝚖̲𝚙̲𝚘̲𝚗̲𝚎̲𝚗̲𝚝̲,̲ ̲@̲𝚂̲𝚎̲𝚛̲𝚟̲𝚒̲𝚌̲𝚎̲,̲ ̲@̲𝚁̲𝚎̲𝚙̲𝚘̲𝚜̲𝚒̲𝚝̲𝚘̲𝚛̲𝚢̲,̲ and @̲𝙲̲𝚘̲𝚗̲𝚝̲𝚛̲𝚘̲𝚕̲𝚕̲𝚎̲𝚛̲ in Spring Boot?
7. How do you create a Spring Boot RESTful web service?
8. What is Spring Boot Actuator, and what are its uses?
9. What is the significance of @̲𝚁̲𝚎̲𝚜̲𝚝̲𝙲̲𝚘̲𝚗̲𝚝̲𝚛̲𝚘̲𝚕̲𝚕̲𝚎̲𝚛̲ and how is it different from @̲𝙲̲𝚘̲𝚗̲𝚝̲𝚛̲𝚘̲𝚕̲𝚕̲𝚎̲𝚛̲?
10. How do you handle exceptions in Spring Boot applications?
11. What is Spring Boot DevTools, and what benefits does it provide during development?
12. How do you use Spring Boot to connect to a database (e.g., MySQL or PostgreSQL)?
13. Explain the difference between @̲𝙱̲𝚎̲𝚊̲𝚗̲ and @̲𝙲̲𝚘̲𝚖̲𝚙̲𝚘̲𝚗̲𝚎̲𝚗̲𝚝̲ in Spring Boot.
14. How do you configure logging in Spring Boot?
15. What are Spring Boot profiles, and how do you manage them for different environments (dev, prod)?
16. How do you implement security in a Spring Boot application?
17. What is Spring Boot’s embedded server, and how does it work?
18. What is the use of @̲𝙴̲𝚗̲𝚊̲𝚋̲𝚕̲𝚎̲𝙰̲𝚞̲𝚝̲𝚘̲𝙲̲𝚘̲𝚗̲𝚏̲𝚒̲𝚐̲𝚞̲𝚛̲𝚊̲𝚝̲𝚒̲𝚘̲𝚗̲ in Spring Boot?
19. What is the difference between Spring Boot’s application.properties and application.yml files?
20. What is Spring Boot's support for creating microservices?
21. How does Spring Boot handle dependency injection?
22. How do you test a Spring Boot application using @̲𝚂̲𝚙̲𝚛̲𝚒̲𝚗̲𝚐̲𝙱̲𝚘̲𝚘̲𝚝̲𝚃̲𝚎̲𝚜̲𝚝̲?
23. Explain the difference between @̲𝚁̲𝚎̲𝚚̲𝚞̲𝚎̲𝚜̲𝚝̲𝙼̲𝚊̲𝚙̲𝚙̲𝚒̲𝚗̲𝚐̲,̲ ̲@̲𝙶̲𝚎̲𝚝̲𝙼̲𝚊̲𝚙̲𝚙̲𝚒̲𝚗̲𝚐̲,̲ ̲@̲𝙿̲𝚘̲𝚜̲𝚝̲𝙼̲𝚊̲𝚙̲𝚙̲𝚒̲𝚗̲𝚐̲ and other HTTP method annotations.
24. What are Spring Boot’s default error handling mechanisms, and how can they be customized?
25. How do you perform batch processing in Spring Boot?
26. What is Spring Data JPA, and how is it used in Spring Boot?
27. How do you manage transaction handling in Spring Boot applications?
28. What are the different ways to run a Spring Boot application?
29. Explain the Spring Boot logging mechanism with default loggers (e.g., Logback).
30. How do you configure Spring Boot to send an email (e.g., using JavaMailSender)?

=============================================

1) Provide me a brief overview of the tools and technologies you have worked on?
2) Describe Smoke, Sanity and Regression Testing? Why do we need to use these 3? 
3) Find me the first and last occurrence of the letter ‘a’ in amazonaanazzz with index number
4) How do you specify environment variables for Maven?
5) How do you specify a property in Maven that can be overridden at build time?
6) How will you execute methods or test cases in TestNG in a different order/your order?
7) What is the difference between @Factory and @Dataprovider annotations?
8) Write the code snipped for passing values 1 and 2 to the parameters val1 and val2 through the XML file.
9) How to test or handle browser notifications?
10) Explain different xpath axes?
 11) Give an example of method overloading concept that you have used in Selenium?
12) Give a scenario where an interface is used in your framework?
13) Can we have static methods in an Interface?
14) In a class implementing an interface, can we change the value of any variable defined in the interface?
15) How to search for text in the current working repo/directory? 
16) How to save local changes made without committing or moving them to a remote repository?
17) y default which join is implemented in SQL?
18) What happens when CI/CD jobs stop in between? 
19) How do you manage CI/CD pipeline when high priority scenarios fail during execution?
20) What is the difference between HTTPS, SSL and TLS? 
21) How would you handle authentication in Cucumber scenarios for web applications?

=============================================

1️⃣ What are the key principles of RESTful API design?
2️⃣ What is the difference between REST and SOAP?
3️⃣ How do you handle versioning in REST APIs?
4️⃣ What are idempotent HTTP methods, and why are they important?
5️⃣ How do you implement pagination in REST APIs?
6️⃣ What is HATEOAS, and how does it enhance REST APIs?
7️⃣ How do you handle authentication and authorization in REST APIs?
8️⃣ What is rate limiting, and how do you implement it in APIs?
9️⃣ How do you ensure backward compatibility in API design?
🔟 What are some best practices for writing efficient and scalable APIs?
=================================

Core Java

1️⃣ What is the difference between an abstract class and an interface in Java?
2️⃣ Explain the concept of method overloading and method overriding with examples.
3️⃣ What are the key differences between a static method and an instance method?
4️⃣ What is the difference between '==' and '.equals()' when comparing objects?
5️⃣ Explain the concept of the Java memory model, stack vs. heap.

Exception Handling

6️⃣ What is the purpose of the throw and throws keywords in Java?
7️⃣ Can you explain how the exception hierarchy works in Java?
8️⃣ How does the Java finally block work, and when is it executed?

Multithreading & Concurrency

9️⃣ Explain the significance of the volatile keyword in Java.
🔟 How does a thread pool work in Java? Why should you use it?
1️⃣1️⃣ What is the difference between wait(), notify(), and notifyAll() in Java?

Collections Framework

1️⃣2️⃣ How do you prevent a ConcurrentModificationException in Java collections?
1️⃣3️⃣ What is the difference between Iterator and ListIterator?
1️⃣4️⃣ Explain the difference between LinkedHashMap and HashMap in Java.

JVM Internals

1️⃣5️⃣ What is the Java ClassLoader, and how does it work?
1️⃣6️⃣ Can you explain the concept of Just-In-Time (JIT) compilation in Java?
1️⃣7️⃣ How does garbage collection work in Java, and what are the types of GC?

===========================================

CI/CD Jenkins Scenario based Question

1. Your company is developing a microservices-based application. You need to design a Jenkins pipeline that builds, tests, and deploys the service automatically across Dev, QA, and Production environments. How would you structure your Jenkins pipeline to ensure smooth deployments with minimal downtime?

2. You need to use API keys and database passwords in your pipeline, but storing them in plain text inside Jenkinsfiles is a security risk. How would you securely manage and inject secrets into your Jenkins pipeline?

3. A developer pushes new code to GitHub, but your Jenkins pipeline doesn’t trigger automatically. What steps would you take to debug and fix this issue?

4. A pipeline stage intermittently fails due to network issues when pulling dependencies. How can you modify your Jenkins pipeline to automatically retry a failed stage?

5. Your test suite takes over 30 minutes to execute, causing delays in deployments. How would you optimize your Jenkins pipeline to run tests in parallel? Integration with Version Control (Git, GitHub, GitLab, Bitbucket)

6. Your team follows GitFlow, working on feature branches before merging to develop and then main. How would you configure Jenkins to automatically build and test every new branch created in GitHub?

7. Your Jenkins pipeline is set to poll GitHub every 5 minutes for changes. However, there are delays in triggering new builds. How can you optimize Jenkins to trigger builds instantly on code changes?

8. A merge request triggers the Jenkins pipeline, but the build fails due to a merge conflict. How would you handle this scenario programmatically in Jenkins?

9. A deployment fails in production due to a bug. You need to quickly revert to the last successful build. What Jenkins pipeline steps would you implement to enable easy rollbacks? CI/CD Pipeline with Build Tools (Maven, Gradle, npm)

10. Your Maven build is failing due to a missing dependency.
Question: How would you modify your Jenkins pipeline to resolve this issue and ensure dependency availability?


=========================================







