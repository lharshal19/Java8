SQL 


DB Locking: 
- Db Locking, help us to make sure that no other transaction update the lokced rows.

Shared Lock(s) -> If Transaction locked data item in shared mode then allowed to read only.
Exclusive Lock(x) -> If Transaction locked data item in exclusive mode then allowed to read and write both.

Lock Type |  Another Shared Lock  |  Another Exclusive Lock
Have Shared Lock | Yes  | No
Have Exclusive Lock  | No  | No


Isolation Level present?

Isolations Level | DirtyRead possible |  Non-Repeatable Read Possible | Phantom Read possible
Read Uncommitted |  Yes  | Yes  | Yes
Read committed   |  No  |  Yes  |  Yes
Repeatable Read  | No  | No  | Yes
Serializable           | No  | No  | No

Dirty Read:
If Transaction A is reading the data which is written by Transaction B and not yet even committed.
If Transaction B does the rollback, then whatever data read by Transaction A is know dirty read.  

Non-Repeatable Read:
If suppose Transaction A, reads the same row several times and there is chance that it reads diferent value.

Phantom Read :
If suppose Transaction A, executes same query several times and there is a chance that the rows returned are diiferent.


ISOLATION LEVEL     |    Locking Strategy
Read Uncommitted	|   Read : No Lock acquired
									Write : No Lock acquired
Read committed     | Read : Shared Lock acquired and Release 


Irrecoverable schedule  : with dirty read problem transaction t2 is irrecoverable.
recoverable schedule :
Cascading schedule : It is same as dirty read
Cascadeless schedule : let Transaction t1 complete by writing data and committing data then only  allows t2 to read.

Conflict equivalent schedule:


===========================================

Blinkit and Zepto asked these SQL questions in their interview.

1/ Write a query to calculate the 7-day moving average for sales data.
2/ Given a table with employee in and out times, calculate the total hours worked per employee per day.
3/ Find the top N highest-grossing products per category.
4/ Write a query to identify the first and last transaction for each customer within a specific time range.
5/ Implement a SQL query to rank products by their sales within each region and break ties using additional criteria.
6/ Write a query to retrieve the second highest salary from an employee table without using LIMIT or OFFSET.
7/ Identify the percentage contribution of each product to the total revenue, grouped by category.
8/ Write a query to find gaps in sequential data, such as missing invoice numbers.
9/ Given a sales table, identify the month-over-month growth percentage for each product.
10/ Write a query to find customers who have made purchases in every quarter of the year.
11/ Calculate the cumulative sales for each product over time and compare it with the average sales.
12/ Write a query to retrieve all customers who made more purchases this month compared to the previous month.
13/ Identify products that have never been sold along with their categories.
14/ Find the top 3 customers who contributed the most to revenue in the last year.
15/ Write a query to compare the sales of the same product across two different time periods.
16/ Identify the longest streak of consecutive days a customer has made a purchase.
17/ Calculate the rolling retention rate for an app based on daily user activity.
18/ Find duplicate rows in a table and group them by their count.
19/ Write a query to delete duplicate rows but keep the row with the earliest timestamp.
20/ Calculate the median salary for employees grouped by department.
21/ Identify the products that have been sold for 3 consecutive months but not for the 4th month.
22/ Write a query to segment customers into cohorts based on their first purchase date and calculate retention rates for each cohort.
23/ Implement a query to calculate the total time spent by each user on the platform, excluding overlapping time intervals.
24/ Create a query to find all the products that were never purchased together in the same transaction.
25/ Write a query to generate a time-series report for sales data, filling in missing dates with zero sales.



=================================================

1. What is a stored procedure?
Answer: A stored procedure is a precompiled set of SQL statements stored in the database. 
It can be executed as a single unit to perform operations like querying data, inserting records, updating data, or deleting rows. 
Stored procedures help improve performance, reusability, and security.

2. What are the advantages of using stored procedures?
Answer:
Performance: Precompiled and optimized SQL code.
Reusability: Can be reused across different programs and users.
Security: Access to data can be controlled through permissions.
Reduced Network Traffic: Logic is executed on the server, minimizing the amount of data sent between the server and client.
Maintainability: Easier to update logic in one place.

3. What are the differences between a stored procedure and a function?
Answer:
Stored procedures can return multiple values, while functions return a single value or a table.
Procedures can perform actions like inserting or updating data, whereas functions are mainly used for computations.
Functions can be used in SQL statements, but stored procedures cannot.

4. How do you create a stored procedure in SQL?
Answer:
CREATE PROCEDURE ProcedureName
AS
BEGIN
    -- SQL Statements
END;

5. How do you execute a stored procedure?
Answer:
EXEC ProcedureName;
Or
EXECUTE ProcedureName;

Intermediate Questions
6. What are input and output parameters in stored procedures?
Answer:
Input Parameters: Allow the caller to pass data into the procedure.
Output Parameters: Allow the procedure to return data to the caller.
Example:
CREATE PROCEDURE GetEmployeeDetails
    @EmployeeID INT, -- Input Parameter
    @EmployeeName NVARCHAR(50) OUTPUT -- Output Parameter
AS
BEGIN
    SELECT @EmployeeName = Name FROM Employees WHERE ID = @EmployeeID;
END;

7. How do you handle errors in stored procedures?
Answer: Use TRY...CATCH blocks. Example:
CREATE PROCEDURE UpdateEmployeeSalary
    @EmployeeID INT,
    @NewSalary DECIMAL(10, 2)
AS
BEGIN
    BEGIN TRY
        UPDATE Employees SET Salary = @NewSalary WHERE ID = @EmployeeID;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END;

8. Can a stored procedure call another stored procedure?
Answer: Yes, a stored procedure can call another stored procedure. Example:
CREATE PROCEDURE OuterProcedure
AS
BEGIN
    EXEC InnerProcedure;
END;

9. What is the difference between temporary and permanent stored procedures?
Answer:
Permanent Stored Procedures: Stored in the database and remain until explicitly dropped.
Temporary Stored Procedures: Created in the tempdb database and exist only for the duration of the connection or session. They are prefixed with #.

10. What is a nested stored procedure?
Answer: A stored procedure that is called within another stored procedure.

Advanced Questions
11. How can you debug a stored procedure?
Answer:
Use PRINT statements to display intermediate values.
Use SQL Server Management Studio's (SSMS) debugging tools to step through code.

12. How do you optimize stored procedures?
Answer:
Avoid using SELECT *, specify column names.
Use proper indexing.
Avoid cursors when possible.
Use table variables or temporary tables efficiently.
Keep transaction scope as small as possible.

13. What are dynamic SQL statements in stored procedures?
Answer: Dynamic SQL allows you to construct and execute SQL statements at runtime. Example:
CREATE PROCEDURE DynamicSQLExample
    @TableName NVARCHAR(50)
AS
BEGIN
    DECLARE @SQL NVARCHAR(MAX);
    SET @SQL = 'SELECT * FROM ' + @TableName;
    EXEC sp_executesql @SQL;
END;

14. How do you handle transactions in stored procedures?
Answer: Use BEGIN TRANSACTION, COMMIT TRANSACTION, and ROLLBACK TRANSACTION.
Example:
CREATE PROCEDURE TransactionExample
AS
BEGIN
    BEGIN TRANSACTION;
    BEGIN TRY
        UPDATE Account SET Balance = Balance - 100 WHERE AccountID = 1;
        UPDATE Account SET Balance = Balance + 100 WHERE AccountID = 2;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH;
END;

15. How can you schedule stored procedures to run automatically?
Answer: Use SQL Server Agent to create a job that executes the stored procedure at scheduled intervals.

=====================
Normalization :-
It is the process of organizing data to reduce redundancy and dependency by divinding a database into smaller tables and linking them using relationships.
The goals are to minimize data duplication and ensure data integrity.

First Normal Form(1NF) : Ensure that the table hax no repeating groups and that each column contains atomic values.
Second Normal Form(2NF ): Achived by eliminating partial dependency , where non-prime atributes are fully dependent on the primary key.
Third NOrmal Form(3NF) : Eliminates transitive dependency, meaning non-key columns are only dependent on the primary key.
Fourth Normal Form(4NF) : Removes multi-valued dependencies.
Fifth Normal Form(5NF) : Removes JOine dependency and ensures that all information is logically stored.

=====================
Index :- 
An Index is a database object that improves the speed of data retrieval operations on a table.
It is created on one or more columns of a table and helps the database engine to find rows more quickly without scanning the entire table.
However, Indexes can slow down INSERT,UPDATE AND DELETE operations because the index also needs to be updated.


Order file |  primary index  |  clustered index 
unorder file | secondary index | secondary index
						|    	key                   |   Non Key	


Types of Indexes:
Single-Column Index: An index created on a single column of a table.
Multi-Column Index (Composite Index): An index created on multiple columns of a table.
Unique Index: Ensures that the values in the indexed columns are unique (commonly used on primary key and unique constraints).
Full-Text Index: Used to speed up text searches (commonly used in searching large text-based fields).
Clustered Index: The table data is stored in the order of the index, so there is only one clustered index per table.
Non-clustered Index: The index is stored separately from the table data, and it contains pointers to the data rows.

How Indexing Works:

An index is created on one or more columns of a table. It contains pointers to the rows of the table where the data resides.

For example, when searching for a specific value in a column, instead of scanning each row, the index can be used to directly locate the rows containing that value.

B-Tree Index: Most commonly used index type, typically used in relational databases. It organizes data in a balanced tree structure, which allows for efficient searching, insertion, and deletion.

Index Creation Example:
CREATE INDEX idx_employee_name
ON employees (last_name);
This will create an index on the last_name column of the employees table.

Index Usage in Queries:

Search Optimization: Indexes speed up queries that involve WHERE clauses, ORDER BY, JOIN conditions, etc.
Example:
SELECT * FROM employees WHERE last_name = 'Smith';
If there is an index on last_name, the database engine can quickly locate the rows where last_name = 'Smith', instead of scanning all rows in the table.
Advantages of Indexing:
Improved Query Performance:

Faster Data Retrieval: Indexes allow the database engine to find data faster by reducing the number of rows to scan.
Optimized Sorting: Queries involving sorting (ORDER BY) are faster with indexes.
Improved JOIN Operations: JOIN queries can benefit from indexes on the columns being joined.
Efficient Data Retrieval in Large Tables:

In large tables with millions of rows, searching and querying data without an index would be slow. Indexes allow for fast access even in large datasets.
Disadvantages of Indexing:
Increased Storage Space:

Indexes consume extra disk space, as they are separate data structures stored alongside the table data.
In some cases, multiple indexes can lead to significant space overhead.
Slower Data Modification Operations:

INSERT, UPDATE, and DELETE operations may be slower because the index also needs to be updated when data changes. For example, when a row is inserted or updated, the database must also adjust the index to reflect the new values.
Maintenance Overhead:

As the data in a table grows or changes, the indexes must be periodically maintained (rebuilt or reorganized) to ensure they remain efficient.
When to Use Indexing:
Use indexing on columns frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses.
Create indexes on primary keys and foreign keys to speed up relational operations.
Avoid over-indexing as it can lead to increased storage and slower data modification operations.

Example of Creating an Index:
Single Column Index:
CREATE INDEX idx_email ON users (email);

Composite Index (Multiple Columns):
CREATE INDEX idx_name_dob ON employees (last_name, first_name, date_of_birth);

Unique Index (Ensures no duplicates):
CREATE UNIQUE INDEX idx_unique_employee_id ON employees (employee_id);

Full-Text Index:
CREATE FULLTEXT INDEX idx_fulltext_description ON products (description);

Conclusion:
Indexing is a critical feature for optimizing the performance of database queries, especially on large datasets. By using indexes effectively, databases can deliver faster query responses and efficient data retrieval. However, it's essential to balance indexing with the overhead it creates on storage and modification operations.

=====================
To call Produre from Spring Boot Application :-

1. Using @Procedure Annotation in Spring Data JPA
Spring Data JPA provides the @Procedure annotation to call stored procedures.

Steps:
a. Create the Stored Procedure: 
CREATE PROCEDURE GetEmployeeById (IN emp_id INT, OUT emp_name VARCHAR(255))
BEGIN
    SELECT name INTO emp_name FROM employees WHERE id = emp_id;
END;

b.Define the Repository: Create a JPA repository interface and use the @Procedure annotation:
public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    @Procedure(procedureName = "GetEmployeeById")
    String getEmployeeNameById(@Param("emp_id") Integer id);
}

c.Call the Procedure in Service:
@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository repository;

    public String getEmployeeName(Integer id) {
        return repository.getEmployeeNameById(id);
    }
}

2. Using EntityManager
The EntityManager can execute stored procedures using native queries.

Steps:
a.Create the Stored Procedure (as shown above).
b.Use EntityManager to Call Procedure:
@Service
public class EmployeeService {
    @PersistenceContext
    private EntityManager entityManager;

    public String getEmployeeName(Integer id) {
        StoredProcedureQuery query = entityManager.createStoredProcedureQuery("GetEmployeeById");
        query.registerStoredProcedureParameter("emp_id", Integer.class, ParameterMode.IN);
        query.registerStoredProcedureParameter("emp_name", String.class, ParameterMode.OUT);

        query.setParameter("emp_id", id);
        query.execute();

        return (String) query.getOutputParameterValue("emp_name");
    }
}

3. Using JdbcTemplate
The JdbcTemplate class provides a straightforward way to call stored procedures.

Steps:
Create the Stored Procedure (as shown above).
Call the Procedure Using JdbcTemplate:
java
Copy code
@Service
public class EmployeeService {
    @Autowired
    private JdbcTemplate jdbcTemplate;

    public String getEmployeeName(Integer id) {
        return jdbcTemplate.execute(
            (Connection con) -> {
                CallableStatement cs = con.prepareCall("{CALL GetEmployeeById(?, ?)}");
                cs.setInt(1, id);
                cs.registerOutParameter(2, Types.VARCHAR);
                cs.execute();
                return cs.getString(2);
            }
        );
    }
}
4. Using SimpleJdbcCall
SimpleJdbcCall is another utility in Spring that simplifies calling stored procedures.

Steps:
Define the Procedure (as shown above).
Call Procedure with SimpleJdbcCall:
java
Copy code
@Service
public class EmployeeService {
    private final SimpleJdbcCall simpleJdbcCall;

    @Autowired
    public EmployeeService(DataSource dataSource) {
        this.simpleJdbcCall = new SimpleJdbcCall(dataSource)
            .withProcedureName("GetEmployeeById")
            .declareParameters(
                new SqlParameter("emp_id", Types.INTEGER),
                new SqlOutParameter("emp_name", Types.VARCHAR)
            );
    }

    public String getEmployeeName(Integer id) {
        Map<String, Object> params = new HashMap<>();
        params.put("emp_id", id);

        Map<String, Object> result = simpleJdbcCall.execute(params);
        return (String) result.get("emp_name");
    }
}
Which Method to Choose?
Use @Procedure in Spring Data JPA if you’re already using JPA and want simplicity.
Use EntityManager for flexibility in managing native queries and complex stored procedures.
Use JdbcTemplate or SimpleJdbcCall for lightweight database interaction or when JPA is not required.




==========================
Cursor :-

A cursor is a database object used to retrieve, manipulate, and iterate through rows returned by a query one row at a time.
It provides control over the traversal of the result set, making it particularly useful for row-by-row processing.

Key Features of a Cursor
Row-by-Row Processing: Allows you to process query results one row at a time.
Control: Provides precise control over how the query results are accessed and manipulated.
Support for Complex Logic: Useful when operations on each row are dependent on conditions or computations.

Types of Cursors
Implicit Cursor:
Automatically created by the database when a DML operation or a query is executed.
The user has no direct control over it.
Example: In PL/SQL, SELECT INTO uses an implicit cursor.

Explicit Cursor:
Defined and controlled explicitly by the user.
Provides more control over query results.
Requires declaring, opening, fetching rows, and closing.

Cursor Types by Accessibility:
Forward-only Cursor: Moves sequentially through rows.
Scrollable Cursor: Allows movement to any row in the result set.
Dynamic Cursor: Reflects changes in the underlying data while it is open.
Static Cursor: Takes a snapshot of the data and does not reflect changes.

Cursor Life Cycle
Declare: Define the cursor and associate it with a query.
DECLARE cursor_name CURSOR FOR SELECT column1, column2 FROM table_name;

Open: Allocate resources and execute the query.
OPEN cursor_name;

Fetch: Retrieve a row from the result set.
FETCH cursor_name INTO variable1, variable2;

Close: Deallocate resources after processing.
CLOSE cursor_name;

Example: Using an Explicit Cursor (PL/SQL)
Cursor Declaration and Usage:
DECLARE
    CURSOR emp_cursor IS
        SELECT employee_id, first_name FROM employees;
    emp_id employees.employee_id%TYPE;
    emp_name employees.first_name%TYPE;
BEGIN
    OPEN emp_cursor; -- Open the cursor
    LOOP
        FETCH emp_cursor INTO emp_id, emp_name; -- Fetch each row
        EXIT WHEN emp_cursor%NOTFOUND; -- Exit loop when no more rows
        DBMS_OUTPUT.PUT_LINE('ID: ' || emp_id || ', Name: ' || emp_name);
    END LOOP;
    CLOSE emp_cursor; -- Close the cursor
END;

Advantages of Cursors
Allows row-by-row processing, useful for operations that can't be performed in bulk.
Provides greater flexibility for complex logic.
Suitable for dynamic result sets.
Disadvantages of Cursors
Performance overhead: Processing rows one by one can be slower than set-based operations.
Resource-intensive: Requires memory and other database resources while open.
Complexity: Adds additional code and maintenance overhead.
Alternatives to Cursors
Use set-based operations (SQL joins, updates, or deletes) whenever possible for better performance.
Use temporary tables or common table expressions (CTEs) for intermediate data manipulation.
For complex logic, consider stored procedures or application-level processing.
=================
What is a trigger?
A. A trigger is a special type of stored procedure in a database that automatically
executes or fires in response to certain events on a table or view. Triggers are used
to enforce rules, automate tasks, and maintain data integrity. They can be set to run
before or after specific events such as INSERT, UPDATE, or DELETE operations.

================
View : 
 - virtual table
 - read only or updatable rows 



//===============================

 Tricky SQL Interview Questions to Test Your Skills 🔍

If you are preparing for an SQL interview or just want to sharpen your query-writing abilities, these tricky and common questions can help you take your skills to the next level:
 1. Find the second-highest salary in a table without using LIMIT or TOP.
 2. Write a SQL query to find all employees who earn more than their managers.
 3. Find the duplicate rows in a table without using GROUP BY.
 4. Write a SQL query to find the top 10% of earners in a table.
 5. Find the cumulative sum of a column in a table.
 6. Write a SQL query to find all employees who have never taken a leave.
 7. Find the difference between the current row and the next row in a table.
 8. Write a SQL query to find all departments with more than one employee.
 9. Find the maximum value of a column for each group without using GROUP BY.
 10. Write a SQL query to find all employees who have taken more than 3 leaves in a month.

💡 These questions are designed to assess your SQL proficiency, including your ability to write efficient queries, think critically, and solve complex problems.

Here are the answers:
 1. SELECT MAX(salary) FROM table WHERE salary NOT IN (SELECT MAX(salary) FROM table)
 2. SELECT e1.* FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id WHERE e1.salary > e2.salary
 3. SELECT * FROM table WHERE rowid IN (SELECT rowid FROM table GROUP BY column HAVING COUNT(*) > 1)
 4. SELECT * FROM table WHERE salary > (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY salary) FROM table)
 5. SELECT column, SUM(column) OVER (ORDER BY rowid) FROM table
 6. SELECT * FROM employees WHERE id NOT IN (SELECT employee_id FROM leaves)
 7. SELECT *, column - LEAD(column) OVER (ORDER BY rowid) FROM table
 8. SELECT department FROM employees GROUP BY department HAVING COUNT(*) > 1
 9. SELECT MAX(column) FROM table WHERE column NOT IN (SELECT MAX(column) FROM table GROUP BY group_column)
 10. SELECT * FROM employees WHERE id IN (SELECT employee_id FROM leaves GROUP BY employee_id HAVING COUNT(*) > 3)

🧠 Key Takeaways:
 • SQL is more than just querying; it’s about problem-solving and optimizing for efficiency.
 • These questions challenge you to think beyond the basics and employ advanced SQL concepts like window functions, subqueries, and percentiles.

=================================


1. What is SQL, and what are its different types?
2. Explain the difference between SQL and MySQL.
3. What are the different types of joins in SQL? Provide examples.
4. What is normalization, and how does it differ from denormalization?
5. Explain the different types of normal forms.
6. What is the difference between DELETE, TRUNCATE, and DROP commands?
7. What are primary keys and foreign keys?
8. How do INNER JOIN and OUTER JOIN differ?
9.What is a subquery? Explain with an example.
10. What are indexes in SQL, and why are they important?
11.What are aggregate functions in SQL? Provide some examples.
12. What is the difference between GROUP BY and HAVING clauses?
13. What is the purpose of the WHERE clause?
14. What are the different types of constraints in SQL?
15. What is a stored procedure, and how does it differ from a function?
16. What is a trigger in SQL? Provide an example.
17. Explain ACID properties in the context of SQL.
18. How do VARCHAR and CHAR differ?
19. What are the different types of SQL data types?
20. What is a self-join? Provide an example.
21. What is a view in SQL, and how does it differ from a table?
22. How does the EXISTS clause work?
23. What is a Common Table Expression (CTE)?
24. What is the purpose of INDEX in SQL?
25. What are transactions in SQL, and how can you manage them?
26. Explain the RANK() and DENSE_RANK() functions in SQL.
27. How can you optimize SQL queries to improve performance?
28. What is the difference between UNION and UNION ALL?
29. How is the LIKE operator used in SQL?
30. Explain the COALESCE function with an example.


==============================

Find nth highest salary 
-> select id,salary from employe e1 where N-1 = ( select count(distinct salary) from employee e2 where e2.salary > e1.salary)

-> select max(salary) from employe e1 where salary < ( select max(salary) from employee e2 where e2.salary > e1.salary)

create table employee
alter table employee add address varchar(10);  --> added column
alter table employee drop column address;  --> drop column
alter table employee modify id varchar(30); --> modify length 
alter table employee rename column id to roll_no;  --> rename column name
alter table employee rename to emp11;  --> rename table name
alter table employeee add primary key ( roll_no) --> add primary key

 
select dept,Max(salary) from employee group by dept;

==========================

SQL queries that are commonly asked during interviews:


1. Retrieve the second-highest salary of employees:
SELECT MAX(salary) AS second_highest_salary
 FROM Employee 
WHERE salary < (SELECT MAX(salary) FROM Employee);

2. Get the total number of employees in each department:
SELECT department, COUNT(employee_id) AS total_employees 
FROM Employee 
GROUP BY department;

3. List customers who have not placed any orders:
SELECT c.customer_id, c.customer_name 
FROM Customers c 
LEFT JOIN Orders o ON c.customer_id = o.customer_id 
WHERE o.order_id IS NULL;

4. Find the product with the highest revenue:
SELECT product_id, SUM(quantity * price) AS total_revenue 
FROM Sales 
GROUP BY product_id 
ORDER BY total_revenue DESC 
LIMIT 1;


5. Retrieve employees who earn more than the average salary:
SELECT * 
FROM Employee 
WHERE salary > (SELECT AVG(salary) FROM Employee);

6. Get the list of products sold in the last 7 days:
SELECT DISTINCT product_id 
FROM Sales 
WHERE order_date >= DATEADD(DAY, -7, GETDATE());

 7. Find the number of orders placed each day:
SELECT order_date, COUNT(order_id) AS total_orders 
FROM Orders 
GROUP BY order_date;

8. Retrieve employees with the same salary:
SELECT employee_id, salary 
FROM Employee 
GROUP BY salary 
HAVING COUNT(employee_id) > 1;

9. List the customers who have placed the most orders:
SELECT customer_id, COUNT(order_id) AS total_orders 
FROM Orders 
GROUP BY customer_id 
ORDER BY total_orders DESC 
LIMIT 1;

10. Get the total quantity of each product sold per month:
SELECT product_id, MONTH(order_date) AS month, SUM(quantity) AS total_quantity 
FROM Sales 
GROUP BY product_id, MONTH(order_date);

====================================


🤯 SQL interview questions:

1. Write a query to calculate the median salary of employees in a table.
=> SELECT AVG(salary) AS median_salary 
FROM ( 
 SELECT salary 
 FROM employees 
 ORDER BY salary 
 LIMIT 2 - (SELECT COUNT(*) FROM employees) % 2 
 OFFSET (SELECT (COUNT(*) - 1) / 2 FROM employees) 
) subquery; 

2. Identify products that were sold in all regions.
=> SELECT product_id 
FROM sales 
GROUP BY product_id 
HAVING COUNT(DISTINCT region_id) = (SELECT COUNT(*) FROM regions); 

3. Retrieve the name of the manager who supervises the most employees.
=> SELECT manager_id, COUNT(*) AS num_employees 
FROM employees 
GROUP BY manager_id 
ORDER BY num_employees DESC 
LIMIT 1; 

4. Write a query to group employees by age ranges (e.g., 20–30, 31–40) and count the number of employees in each group.
5. Display the cumulative percentage of total sales for each product.
6. Write a query to retrieve the first order placed by each customer.
7. Identify employees who have never received a performance review.
8. Find the most common value (mode) in a specific column.
9. Display all months where sales exceeded the average monthly sales.
10. Write a query to identify the employee(s) whose salary is closest to the average salary of the company.

Answers:

Solution 4

SELECT CASE 
 WHEN age BETWEEN 20 AND 30 THEN '20-30' 
 WHEN age BETWEEN 31 AND 40 THEN '31-40' 
 WHEN age BETWEEN 41 AND 50 THEN '41-50' 
 ELSE '50+' 
 END AS age_range, 
 COUNT(*) AS num_employees 
FROM employees 
GROUP BY age_range; 

Solution 5

SELECT product_id, 
 SUM(sales) AS product_sales, 
 SUM(SUM(sales)) OVER (ORDER BY SUM(sales) DESC) * 100.0 / SUM(SUM(sales)) OVER () AS cumulative_percentage 
FROM sales_table 
GROUP BY product_id; 

Solution 6

SELECT customer_id, MIN(order_date) AS first_order_date 
FROM orders 
GROUP BY customer_id; 

Solution 7

SELECT * 
FROM employees 
WHERE employee_id NOT IN (SELECT employee_id FROM performance_reviews); 

Solution 8

SELECT column_name, COUNT(*) AS frequency 
FROM table_name 
GROUP BY column_name 
ORDER BY frequency DESC 
LIMIT 1; 

Solution 9

SELECT month, SUM(sales) AS monthly_sales 
FROM sales 
GROUP BY month 
HAVING monthly_sales > (SELECT AVG(SUM(sales)) FROM sales GROUP BY month); 

Solution 10

SELECT employee_id, salary 
FROM employees 
ORDER BY ABS(salary - (SELECT AVG(salary) FROM employees)) ASC 
LIMIT 1; 

======================
ITC Client SQL Interview Questions
=======================
1. What is the difference between a Stored Procedure (SP) and a Function in SQL?

2. Given the Student Table:
id name mark1 mark2 mark3 mark4
1 abc NULL 20 40 50
2 xyz 50 NULL 35 40
3 siva 50 40 NULL 10
Write a query to calculate the total marks for each student.
Compute the sum of all student marks.
Assign a rank to each student based on their total marks.
3. What is an Indexed View in SQL?
4. What is the difference between Local Variables (LV) and Global Variables (GV) in SQL?
5. Understanding Indexes:
 What is the difference between Unique and Non-Unique indexes?
 What types of indexes can be created on Unique and Non-Unique columns?
6. What are Triggers in SQL? Can we create Triggers? Provide an example.
7. Can a Function support DML operations (INSERT, UPDATE, DELETE) in SQL?
8. Can Table-Valued Functions support DML operations?

======================================

1/ Find the second highest salary from an Employee table.
-Query a method without using the LIMIT or TOP clauses.
2/ Write a query to return the nth highest salary from the Employee table.
3/ Given a table of customers and orders, write a query to find the total number of customers who have not placed any orders.
4/ Find the most recent order for each customer from an Orders table.
5/ Write a query to find employees who have the same salary as their manager.
6/ Find the employees who have the longest consecutive streak of being present without any absence, given an Attendance table.
7/ Write a query to find the employees who have worked in multiple departments, using only one query.
8/ Write a query to return a list of products that have never been sold, given a Products and Orders table.
9/ Find the number of customers who made their first purchase in each month.
10/ Write a query to find all employees who joined after their manager, based on a Join table.
11/ Given a list of employees, write a query to find all employees who are not supervisors of anyone.
12/ Write a query to calculate the cumulative sales by month, given an Orders table.
13/ Find the count of orders placed by each customer in each month, considering only those customers who placed orders in more than one month.
14/ Write a query to rank products based on sales, but reset the ranking for each category.
15/ Find the customers who have purchased the same product at least twice.
16/ Write a query to calculate the difference in days between the first and last orders of each customer.
17/ Write a query to identify the customers who have never ordered the same product twice.
18/ Find the percentage of total sales contributed by the top 5 products.
19/ Find the most common product purchased together with each product.
20/ Write a query to find the customers who have spent more than the average amount, but spent less than the highest spender.

===========================================

Don't overwhelm to learn SQL,🙄

SQL is only this much👇😄

1. Intro to SQL
 • Definition
 • Purpose
 • Relational DBs
 • DBMS

2. Basic SQL Syntax
 • SELECT
 • FROM
 • WHERE
 • ORDER BY
 • GROUP BY

3. Data Types
 • Integer
 • Floating-Point
 • Character
 • Date
 • VARCHAR
 • TEXT
 • BLOB
 • BOOLEAN

4. Sub languages
 • DML
 • DDL
 • DQL
 • DCL
 • TCL

5. Data Manipulation
 • INSERT
 • UPDATE
 • DELETE

6. Data Definition
 • CREATE
 • ALTER
 • DROP
 • Indexes

7. Query Filtering and Sorting
 • WHERE
 • AND
 • OR Conditions
 • Ascending
 • Descending

8. Data Aggregation
 • SUM
 • AVG
 • COUNT
 • MIN
 • MAX

9. Joins and Relationships
 • INNER JOIN
 • LEFT JOIN
 • RIGHT JOIN
 • Self-Joins
 • Cross Joins
 • FULL OUTER JOIN

10. Subqueries
 • Subqueries used in
 • Filtering data
 • Aggregating data
 • Joining tables
 • Correlated Subqueries

11. Views
 • Creating
 • Modifying
 • Dropping Views

12. Transactions
 • ACID Properties
 • COMMIT
 • ROLLBACK
 • SAVEPOINT
 • ROLLBACK TO SAVEPOINT

13. Stored Procedures
 • CREATE PROCEDURE
 • ALTER PROCEDURE
 • DROP PROCEDURE
 • EXECUTE PROCEDURE
 • User-Defined Functions (UDFs)

14. Triggers
 • Trigger Events
 • Trigger Execution and Syntax

15. Security and Permissions
 • CREATE USER
 • GRANT
 • REVOKE
 • ALTER USER
 • DROP USER

16. Optimizations
 • Indexing Strategies
 • Query Optimization

17. Normalization
 • 1NF(Normal Form)
 • 2NF
 • 3NF
 • BCNF

18. Backup and Recovery
 • Database Backups
 • Point-in-Time Recovery

19. NoSQL Databases
 • MongoDB
 • Cassandra etc.
 • Key differences

20. Data Integrity
 • Primary Key
 • Foreign Key

21. Advanced SQL Queries
 • Window Functions
 • Common Table Expressions (CTEs)

22. Full-Text Search
 • Full-Text Indexes
 • Search Optimization

23. Data Import and Export
 • Importing and Exporting Data (CSV, JSON)
 • Using SQL Dump Files

24. Database Design
 • Entity-Relationship Diagrams (ERDs)
 • Normalization Techniques

𝗕𝗲𝘀𝘁 𝗽𝗹𝗮𝘁𝗳𝗼𝗿𝗺𝘀 𝘁𝗼 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗲 𝗦𝗤𝗟 𝗽𝗿𝗼𝗯𝗹𝗲𝗺𝘀 𝗱𝗮𝗶𝗹𝘆

- Dataford - https://lnkd.in/dtHJHxXf
- LeetCode - https://lnkd.in/gkCpv7NA
- HackerRank - https://lnkd.in/gnFS4frz
- SQLZoo - https://sqlzoo.net/
- Mode Analytics - https://lnkd.in/gRPrQrf5
- SQL Bolt - https://sqlbolt.com/
- LearnSQL - https://www.learnsql.com/
- LearnMode - https://lnkd.in/gQYCkwS2
- Strata Scratch - https://lnkd.in/gYtZQY53
- DataLemur - https://datalemur.com/
- SQL Fiddle - http://sqlfiddle.com/
- DB-Fiddle - https://www.db-fiddle.com/
- SQL Exercises - https://lnkd.in/d89TewuQ
- SQL Practice Set - https://lnkd.in/ddn7hfeu

===========================================



