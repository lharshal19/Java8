#Follow4more Amit Jain 💯🔥💯
🔥🔥 Some important questions ofJavaScript 💯💯


### **Basic Level**
1. What is JavaScript, and how is it different from Java? 
2. What are the data types in JavaScript? 
3. Explain `var`, `let`, and `const` and their differences. 
4. What is the difference between `==` and `===`? 
5. What are JavaScript closures? Provide an example. 
6. What is the difference between `null` and `undefined`? 
7. How does the `typeof` operator work? 
8. Explain the difference between synchronous and asynchronous code. 
9. What is hoisting in JavaScript? 
10. How does the scope work in JavaScript? Explain with examples. 

### **Intermediate Level**
1. What are JavaScript promises? How are they used? 
2. What is the purpose of `async/await` in JavaScript? 
3. How does the event loop work in JavaScript? 
4. Explain the difference between `call()`, `apply()`, and `bind()`. 
5. What are arrow functions, and how are they different from regular functions? 
6. What is the difference between shallow copy and deep copy? 
7. How do you handle errors in JavaScript? Explain `try...catch` with examples. 
8. What is the difference between `forEach`, `map`, `filter`, and `reduce`? 
9. What are JavaScript modules, and how are they imported/exported? 
10. What is the difference between `spread` and `rest` operators? 

### **Advanced Level**
1. What are prototypes in JavaScript, and how do they work? 
2. Explain the concept of event delegation. 
3. What is the difference between `setTimeout` and `setInterval`? 
4. What are Web APIs? Name some commonly used ones. 
5. What is `this` in JavaScript? How does it behave in different contexts? 
6. How does JavaScript manage memory, and what are memory leaks? 
7. Explain the concept of currying in JavaScript. 
8. What are generators, and how are they different from regular functions? 
9. What is the difference between `weakMap` and `map` in JavaScript? 
10. How would you optimize a JavaScript application for performance? 

### **Coding Challenges**
1. Write a function to reverse a string. 
2. Implement a debounce function. 
3. Write a function to flatten a nested array. 
4. Create a polyfill for `Promise.all()`. 
5. Write a function to find the longest palindrome in a string. 
6. Implement a function to deep clone an object. 
7. Write a function to check if a number is prime. 
8. Build a function to perform binary search on a sorted array. 
9. Write a function to sort an array without using the built-in sort method. 
10. Create a function to throttle an event. 

====================================



𝗛𝗧𝗠𝗟
1. What is the difference between `id` and `class` attributes?
2. How does the `doctype` declaration affect a webpage?
3. Explain semantic HTML and its importance.
4. What are `meta` tags, and why are they used?
5. What is the difference between `span` and `div` tags?
6. How does the `defer` attribute in a script tag work?
7. What is the difference between inline, block, and inline-block elements?
8. How do you optimize images for web performance in HTML?
9. What are custom data attributes, and how are they used?
10. How would you create an accessible custom tooltip using only HTML?

𝗝𝗔𝗩𝗔𝗦𝗖𝗥𝗜𝗣𝗧
1. What are closures, and how are they used?
2. Explain the difference between `var`, `let`, and `const`.
3. What is the event loop in JavaScript?
4. How does prototypal inheritance work?
5. What are promises, and how do they compare to async/await?
6. What is the difference between `==` and `===`?
7. Explain the concept of "hoisting" in JavaScript.
8. How do you handle errors in JavaScript?
9. What is debouncing and throttling in JavaScript?
10. How would you implement a deep clone of an object without using libraries?

𝗥𝗘𝗔𝗖𝗧
1. What is the virtual DOM, and how does it work?
2. How do React functional components differ from class components?
3. What are React hooks, and why are they used?
4. Explain the concept of lifting state up in React.
5. What is the purpose of `useEffect` and how is it used?
6. How does context API work in React?
7. What is the difference between controlled and uncontrolled components?
8. How do you optimize a React application’s performance?
9. What are React portals, and how are they useful?
10. How would you implement a custom hook to debounce user input in a React application?

𝗔𝗰𝗰𝗲𝘀𝘀𝗶𝗯𝗶𝗹𝗶𝘁𝘆 (𝗔𝟭𝟭𝗬)
1. What is ARIA, and why is it important?
2. How would you ensure a form is accessible?
3. What are some common accessibility issues in web development?
4. How do you make images accessible?
5. What is a screen reader, and how does it work?
6. How would you create an accessible navigation menu?
7. What is the difference between `role="button"` and a `<button>` element?
8. How do you test a webpage for accessibility?

𝗢𝗽𝘁𝗶𝗺𝗶𝘇𝗮𝘁𝗶𝗼𝗻
1. What is lazy loading, and how do you implement it?
2. How do you reduce the size of a JavaScript bundle?
3. What are the benefits of using a Content Delivery Network (CDN)?
4. How do you optimize CSS delivery?
5. What is caching, and how does it improve performance?
6. What are critical rendering paths?
7. How do you optimize for Time to First Byte (TTFB)?
8. How do service workers improve web performance?

=============================


JAVASCRIPT 
1. What is Javascript and its purpose
 2. Explain what kind of application we can built using Javascript 
3. What are variables and explain the rules to create a variable
 4. What are Data types
 5. Explain Primitive and Non Primitive Data type
 6. What is function in Javascript 
7. Explain the Difference between callback and higherorder function in JS?
 8. What is difference between let ,cons and var
 9. What is spread operator
 10. What is Rest Parameter 
11. What is promise in Javascript 
12. Explain different States of Promise in Javascript 
13. How to create a Promise
 14. What is difference between promise and callback in Javascript
 15. What is Callback
 16. What is higher order function in Javascript 
17. Explain different types of function in Javascript 
18. What is arrow function in Javascript 
19. Why we use call, apply bind method in 
20. Javascript
 21. How many way to create object in Javascript
 22. What are the array method , string method 
23. What is difference between java and javascript 
24. What is Null and undefined in javascript 
25. What is setTimeOut and setInterval in Javascript
 26. What is sessionStorage, localStorage 
27. What are is map, filter , reducer in javascript 
28. What is closure in Javascript 
29. What is housing in Javascript 
30. What is the difference between array and object 
31. What is the difference between number type and BigInt type
 32. What is the difference between call() and apply()
 33. What is DOM and DOM Manipulation 
34. How to create element dynamically using Javascript 
35. Explain Closures in Javascript 
36. Explain different Scopes in Javascript 
37. What is import and export 
38. What is Destructing in the Javascript 
39. Difference between Normal Functin and Arrow Function 
40. Explain the difference between map() and filter() 
41. Explain difference between map() and forEach() 
42. What are events in Javascript
 43. What is null and undefined in Javascript 
44. Explain the difference between == and ===


==========================



𝗝𝗦𝗢𝗡 𝗮𝗻𝗱 𝗢𝗯𝗷𝗲𝗰𝘁 𝗠𝗮𝗻𝗶𝗽𝘂𝗹𝗮𝘁𝗶𝗼𝗻:
1. Convert a JS value to a JSON string.
2. Perform a deep copy of a value, handling circular references.
3. Convert a JSON string back to a JS value.
4. Merge two objects, deeply combining properties.
5. Deep freeze an object, preventing any changes.
6. Write a polyfill for `typeof` to return the correct type.
7. Convert a JS object into a query string.
8. Parse a query string back into a JS object.
9. Return the longest word in a string.
10. Compare two objects for deep equality.
11. Flatten a deeply nested object.
12. Rename keys in an object based on a mapping.

𝗔𝘀𝘆𝗻𝗰𝗵𝗿𝗼𝗻𝗼𝘂𝘀 𝗣𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴:
13. Implement Promise.any and Promise.allSettled.
15. Run N async tasks in series.
16. Execute N async tasks concurrently.
17. Execute N async tasks in a race condition.
18. Throttle promises to limit API request rates.
19. Cache identical API requests to avoid redundancy.
20. Retry a promise-based function a specified number of times.
21. Implement a timeout for a promise.
22. Combine multiple promise-based functions, executing in parallel.

𝗘𝘃𝗲𝗻𝘁 𝗛𝗮𝗻𝗱𝗹𝗶𝗻𝗴 𝗮𝗻𝗱 𝗖𝗮𝗹𝗹𝗯𝗮𝗰𝗸𝘀:
23. Build a class that can subscribe to and emit events.
24. Write a debounce function with a cancel method.
25. Implement a throttle function with a cancel method.
26. Write your own version of the `call` method.
27. Develop polyfills for `call`, `apply`, and `bind`.
28. Implement a simple pub/sub pattern.
29. Write a custom event emitter for once-only listeners.
30. Handle event delegation.

𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝗮𝗹 𝗣𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴:
31. Memoize a function taking a single argument.
32. Write a pipe function that chains N functions.
33. Write a curried function supporting placeholders.
34. Create a polyfill for `Object.assign`.
35. Write a polyfill for Lodash's `memoize` function.
36. Calculate factorial using recursion.
37. Generate Fibonacci numbers up to N.
38. Implement a custom _chunk function like Lodash.
39. Implement compose, combining functions from right to left.
40. Implement lazy evaluation for a chain of functions.
41. Flatten an array of arrays using reduce.

𝗔𝗿𝗿𝗮𝘆 𝗮𝗻𝗱 𝗦𝘁𝗿𝗶𝗻𝗴 𝗠𝗮𝗻𝗶𝗽𝘂𝗹𝗮𝘁𝗶𝗼𝗻:
42. Check if two values are deeply equal.
43. Recursively flatten an array to a single level.
44. Implement negative indexing in arrays using proxies.
45. Create a custom version of Lodash's
_.get method.
46. Find the intersection of two arrays.
47. Remove duplicates from an array.
48. Sort an array of objects by a property.
49. Group an array of objects by a property.
50. Rotate an array to the left by k positions.

=======================

40 React Interview Questions to Help You Crack your Next React Interview 

If you're preparing for your first React interview or just want to stay sharp, these questions cover the key topics you need to know.
Take a look and get ready to attempt that interview!

1. What is React?
2. What is useMemo?
3. What are the features of React?
4. What is JSX?
5. What is the DOM?
6. What is the Virtual DOM?
7. What is the component lifecycle of a React class component?
8. What are fragments in React?
9. What are props in React?
10. What are synthetic events in React?
11. What are the differences between package.json and package-lock.json ?
12. What are the differences between client-side and server-side rendering?
13. What is state in React?
14. What are props?
15. What are the differences between state and props in React?
16. What is props drilling?
17. What are the disadvantages of props drilling, and how can we avoid it?
18. What are pure components in React?
19. What are refs in React?
20. What is meant by forward ref?
21. What are error boundaries?
22. What are higher-order components in React?
23. What are the differences between controlled and uncontrolled components?
24. What is useCallback?
25. What are the differences between useMemo and useCallback?
26. What are keys in React?
27. What is lazy loading in React?
28. What is suspense in React?
29. What are custom hooks?
30. What is the useReducer hook?
31. What are portals in React?
32. What is context in React?
33. What is the purpose of a callback function as an argument of setState()?
34. Give an example of Context API usage.
35. Create a custom hook for an increment/decrement counter.
36. Which lifecycle hooks in class components are replaced with useEffect in functional components?
37. What is Strict Mode in React?
38. What are the different ways to pass data from a child component to a parent component in React?
39. How to send data from child to parent using callback functions?
40. How to send data from a child component to a parent using useRef?


=================================================

1. Can you name two programming paradigms important for JavaScript app developers?
2. What is functional programming?
3. What is the difference between classical inheritance and prototypal inheritance?
4. What are the pros and cons of functional programming vs. object-oriented programming?
5. When is classical inheritance an appropriate choice?
6. When is prototypal inheritance an appropriate choice?
7. What does "favor object composition over class inheritance" mean?
8. What are two-way data binding and one-way data flow, and how are they different?
9. What are the pros and cons of monolithic vs. microservice architectures?
10. What is asynchronous programming, and why is it important in JavaScript?

============================================




