
Interview questions #8
Organization - Capgemini


Level : 1

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Core java
- Explain features of java 8
- What are functional interfaces
- What are streams?
- What is a CompletableFuture?
- What is collections framework?
 - What all things have you used in the collection framework?
- Difference between HashMap and Hashtable

Coding
- Fetch the second highest salary

Spring framework
- Why send data in batches to database instead of sending all in one go?
- What is a rest API, what do you know about the REST framework?
- What is the use of status codes in rest?
- Why do we use different methods in rest APIs?
- How will spring application understand the JSON request you send?
- Why are you using JDBCTemplate over hibernate?
- How do you achieve spring security?

Microservices
- What do you know about micro services?
- How to do load balancing? What is eureka?
- How do you scale your applications?
- How do you deploy services?
- What are the steps involved in deploying a service?

Circuit Breaker
- How to do circuit breaking? What framework do you use for it?
- What is an open, half open and closed state?

Spring security
- What do you know about JWT tokens?

Some generic questions
- What are the critical and difficult defects you have fixed?
- What technologies have you used?
- Have you used docker and Kubernetes?


Level : 2

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Core java
- Difference between == and equals
- What are the latest java feature in latest versions?
- Difference between Collection and Collections
- How HashMap works?
- How do you synchronize a HashMap?
- Why do we have concurrent HashMap when we can synchronize HashMap?
- What is the use of streams in java?
- What is a lambda expression?
- What is a scope resolution operator?

Coding
- Write a program to print the count of each character in a string

Spring framework
- Difference between @Autowired and @Qualifier?
- How do you handle exceptions in spring boot?
- Have you worked on hibernate?

Microservices
- How to setup a microservice architecture?
- How do you establish communication between two microservices?
- Are these calls synchronous or asynchronous?
- Explain the microservice design patterns you have worked on

//====================================

Recent deloitee interview questions 

1. Communication between microservices
2. What is encapsulation
3. Differences between abstract class and interface
4. What is exception handler
5. If ur controller receives multiple requests at time by client how would you handle those
6. What is circuit design pattern
7. What are solid design principles
8. What is default methods, can you override it
9. What is singleton design pattern explain with example
10. Guess the program output on static blocks
11. Profiling in springboot
12. Guess the program output on strings equals and == operator example
13. Differences between put and patch
14. Differences between final ,finally, finalize 
15. differences between @requestparam and @path variable give example
16. How db configured and integrated with springboot
17. what is dispatcher servlet and service registry, how the Eureka server used as centralized node
18. Executor framework
19. lifecycle of thread
20. can you run thread by using run method without start() method if not why 
21. how to test mockito test cases and annotation used
22. in jpa if ur using inbuilt queries like findbyid if no record found for that , what will be output ,any exception thrown?
.23. explain the flow of layers ur using and explain how u created APIs from controller to repository.
24. given list of integers and asked to sort the elements based on ascending order.
25. Types of exceptions with examples.
26. What is spring actuator how do you incorporated in ur project 

Interview questions #21
Organization - Publicis Sapient (1/4)


Level - 1

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Core java
- Create an immutable class (make sure you add a list as a parameter and it should be un-modifiable)
- Difference between unmodifiable and immutability
- What are intermediate and terminal operations in streams?
- What/how is Reactive programming (flux and mono)
- What design patterns have you used? Strategy / behavior / structural
- HashMap implementation. How are collisions resolved?
- Future and CompletableFuture
- What is fail-fast vs fail-safe
- Explain Liskov - Substitution principle
- Explain open-close principle
- Linked HashMap and linked HashSet in java
- VM arguments
- Difference between List.of() and Arrays.asList()

Coding
- Create a getMin method in binary search tree
- What is the time complexity of finding the min element in a binary search tree

Spring framework
How to make two or more database calls at a time in spring boot?
- What is a prototype in spring boot? How can you create multiple objects of the same instance in spring boot?
- What do you know about spring security?

Kafka
- What is Kraft?
- How do you scale up Kafka?
- How do you make sure you don’t read duplicate messages in Kafka?
- What is exactly once, at least once, only once in Kafka?
- Idempotence is Kafka
- What is offset in Kafka?

Database
- Get max salary records from employee table and sort them
- What is indexing in a database?
- What is a materialized view?
- Explain CAP theorem

Some generic questions
- Have you ever used ER diagrams?
- Have you ever used class diagrams or UML diagrams?
- Have you ever worked on high level designs and low level designs?
- Reactive programing
- DDD - domain driven designing
- Have you ever used docker? How do you configure dockerfile?
- Have you ever used cache? How does cache work?
- How to you configure JWT
- Have you ever used OAuth?
- What do you know about Jenkins? Ever configured Jenkins files?
- Ever configured SONAR files?
- Spring security
- Which API gateway have you used (Zuul)
- Circuit breaking
- What is breaking the chain?
- Azure credential manager
- Data ingestion pipeline
- Graph QL
- What is CSRF (Cross Site Request Forgery)
- Breaking chain


=================================


Interview Questions for SDET role in Zeta. 

Exp Level 4 - 7 Years

1. Given an unsorted array of integers, find the third largest number in the array. If the array has less than 3 distinct numbers 
 return the largest number ? 
 Example 
 Input:
 arr=[2,4,1,5,3,6]
 Output:
 4
 Explaination: 
 The sorted array in descending order is[6,5,4,3,2,1]. The third largest number is 4.

2. Given an array Of Strings, group the strinbgs that are anagrams of each other.
 Example:
 Input:
 arr=["eat","tea","tan","ate","nat","bat"]
 Output:
 [["eat,"tea","ate"],["tan","nat"],["bat"]]
 Explaination: The group of anagrams are ["eat,"tea","ate"],["tan","nat"] and ["bat"]

3. Given an array of integers, find the largest number that does not have any duplicates in an array.
 Example:
 Input:
 arr=[4,3,2,7,3,4,8]
 Output:
 8
 Explaination: The unique numbers are [2,7,8] and the largest among them is 8

4. Java program to find second max element from an array ?

5. How do you handle multiple windows and iframes. Explain via code ?

6. How do you handle SSL certificates and security relates issues in Selenium ? 

7. How do you handle exceptions and errors in Selenium ?

8. What are the advantages and limitations of Selenium for test automation ?

===================================================


Interview questions #14
Organization - Highradius

Level : 1

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Core java
- Explain BiPredicate
- Strings
- Inheritance
- StackOverflow exception
- Different exceptions
- Null pointer in java and how to prevent it?
- ArrayIndexOutOfBounds exception
- Recursion
- Memories in Java
- How to iterate values in a map
- It is valid to have classes and interfaces without any content in them
- Exception hierarchy
- Checked and unchecked exception
- Examples of checked and unchecked exceptions
- Final, finally and finalize
- 'final' method
- 'final' method reference
- What is String constant pool
- Mention few String class methods
- Why is string immutable
- Different ways of creating strings
- Collection hierarchy
- Difference between list and set
- Structure of map
- How values are stored based on hashing
- Java 1.8 features
- Different methods of object class
- Different oops concepts
- What is abstraction and encapsulation?
- What is method overloading and method overriding?

Data structures
- Linked list

Coding
- Check whether a given year is leap year or not?
- Inserting new node in between linked list
- Binary search logic

Design patterns
- What are the different categories of design patterns?
- Explain the design patterns you have used which use cases in you previous projects

Spring framework
- Spring MVC
- Annotations of spring MVC
- What do you know about app security?
- How do you set up security in a spring app?
- What do you know about SSO?

Microservices
- What is JWT?
- What are the different parts of JWT token?

Kafka
- Have you used Kafka? Explain the business need where you have implemented it?

System design
- Can you design an Amazon E-commerce system(only a web app)?
- Explain the tech stack that you’ll use for this

Some generic questions
- What are your current roles and responsibilities?
- Which part do you prefer, dealing with people or working on the technical side of it?

=======================================

Interview questions #7 (1/2)
Organization - EY

Level : 1

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Spring framework
- How do you make services communicate with each other?
- What is @Async?
- What is @Transactional?

Microservices
- Explain the architecture of your project
- What does service discovery do when a service goes down?

Circuit Breaker
- What is circuit breaking? What are the different methods of achieving it?
- What other frameworks can be used in place of Resilience4j?

Database
- How to add new column to a table
- Delete duplicate records in a table
- What is an index in SQL
- What is an SQL trigger
- What is an SQL stored procedure
- Define a table structure for user

Spring security
- What do you know about spring security?
- What are request matchers in spring security?
- JWT and OAuth
- How do you generate JWT token?
- How to authenticate user?

Some generic questions
- What is scaling up and scaling down?
- How did you implement AWS S3 for uploading and reading data?
- What is containerization?


Level : 2

About project
- Explain about your project and tech stack you are using
- What are your roles and responsibilities in your team

Core java
- Deadlock synchronization program debugging

Spring framework
- What does @Component do?
- What is the use of @Autowired?
- Have you ever used JPA or hibernate?
- How is pagination is implemented?
- What do you send in the request body of a transaction?
- Which status codes have you used?
- Difference between put and post
- Put or post, which one is idempotent?

Microservices
- What all microservice design patterns have you used?

Circuit Breaker
- What is circuit breaking? What are the different methods of achieving it?
- What other frameworks can be used in place of Resilience4j?

Spring security
- How to set up spring security?

Some generic questions
- How do you handle event driven programming

==================================

Scenario Based Java Developer Interview Questions
#java #scenario #interview #questions
1. If you were asked to sort 1 million records by a custom order, how to approach it? What to consider when choosing a data structure?

2. In one of your projects, you’ve been asked to optimize memory usage. Let’s say you have a list of records, but duplicates aren’t allowed. Would you prefer Set or List? Why?
3. Say you’re building a text-processing tool where strings undergo multiple transformations like trimming, replacing, and concatenating. Which class would you choose between String, StringBuilder, or StringBuffer? Why?
4. You need to write a program where multiple threads process records from a shared queue, but you must ensure no record is processed twice. What Java constructs or libraries would you use?

5. Let’s say you have a utility class with methods like calculateTax() and formatDate().
Ø Would you make these methods static? Why or why not?
Ø What if one of these methods needs to maintain a global counter? How would you design it?

6. Imagine you’re tasked with creating a search engine feature that processes millions of text entries to find keywords.
Ø How to handle string manipulation to ensure efficiency?
Ø Is it always a good idea to use StringBuilder over String? Why?

7. You’re designing a system to track user sessions for a web application. Sessions are unique, need to be frequently accessed, and expire after a certain time.
Ø Which collection would you use, and why?
Ø How to handle concurrent access to this collection?

8. You have a multi-threaded application that processes orders. Each thread must ensure it does not pick the same order twice.
Ø How to design the solution to prevent duplicate processing?
Ø Can volatile help here? Why or why not?

9. Imagine your application is facing frequent OutOfMemoryError issues during peak loads.

Ø How can you troubleshoot and optimize the JVM heap memory?
Ø What is the difference between the heap and the stack in JVM memory management?
Ø What is the purpose of the GC Root in Java?

10. You’re working on a trading platform where orders need to be processed in the order they arrive. Duplicate orders should be ignored.

Ø Which collection(s) would you use, and why?
Ø How does a PriorityQueue differ from a LinkedList in terms of performance?

11. You need to filter a list of employee objects to find all employees with a salary above 50,000.
Ø How to achieve this using Java Streams?
Ø What is the difference between map() and flatMap() in Streams?

12. Can immutable classes still have mutable fields? Why or why not?

13. Imagine you’re building an application with different user roles (ADMIN, USER, GUEST). How would you use Enums effectively here?
14. Can Enums have constructors and methods? Provide an example.

==================================================


#interviews
Most frequently asked interview questions for 5+ years experience. For SSE and tech lead for Java+springboot+ Microservice+ kafka+ spring security+ system design + behavioural+ L1 + L2...
sum of 40+ interviews....

1. Explain your recent project.(Functional and technical design)
2. Introduce yourself.
3. Stream API program and functional interface.
4. Collection basics and Programs. Which collection used for multithreading.
 Hashtable & Hashmap
5. Spring security+ Okta+ JWT
6. Important annotation of Spring
7. AWS services used and are significant in your recent project.
8. Basic oops concepts with examples of interfaces and polymorshim
9. RestAPI and communication with other microservice. Signature, security, and exception handling
10. SOLID principle and base Java classes
11. Thread and threadpool
12. KAFKA. - basic to advance
13. Design patterns ( Singleton and Factory)
14. How to read and write large data- best practices. How to read from multiple databases 
15. How to read and write large files and heavy http calls
16. AOP
17. Hibernate basics 
18. JUNIT & CICD basics
19. How will you design a good Microservice. OR how heavy traffic and data will be managed..
20 . Role of ActiveMQ and Elastic Search
21. What AWS services you have used.
22. Where you want to see yourself in N number of years.
23. How you will handle pressure and conflicts in your team.
24. JVM internal working 
25. Thread and Threadpool 
26. Java8 and Java11 new features 
27. How you will solve memory leak and low performing query 
28. How you will maintain data integrity and data availability and consistency 
29. How you will identify and solve production bugs 
30. Why you left your last company and what are your future plans.
31. Basics of MySQL and DB design best practices 
32. Maven, Pom, Tomcat and other circular dependencies 
33. Https and TLS (How to prevent security attacks)
34. Pagination, filters and Actuators 
35. Agile and team performance.

=====================================


1. Can you briefly introduce yourself?
2. What are three OOPS concepts used in your framework? Please explain in detail.
3. What is the difference between ArrayList and LinkedList?
4. How do POST and PUT methods differ in API testing?
5. Write a program to count and print the number of 'A's in a given string.
6. What is a Stale Element Exception? Why does it occur, and how do you handle it?
7. Explain 401 and 500 error codes.
8. What is an Element Not Found Exception? Why does it occur, and how do you handle it?
9. Write a program to find the factorial of a number.
10. Write a program to reverse a number.
11. What is the difference between List and Set in Java?
12. Write a program to count duplicate characters in a string.
13. Which CI/CD pipeline tools have you used? Can you explain your experience with them?
14. What domain experience do you have in your career so far?
15. How many team members have you led in your projects?
16. Can you explain Polymorphism, along with examples of Method Overloading and Method Overriding?
17. Do you have any questions for us?

=============================

🚀 Interview Experience – Java Developer (L1 and L2 Questions)

These might come in handy for anyone preparing for Java developer roles!

L1 Interview Questions

* Introduction (as usual)
* Explain the internal working of HashMap in Java.
* What are wrapper classes? What are their advantages?
* How does indexing work in MongoDB?
* Difference between @RestController and @Controller in Spring.
* What are REST services?
* Inner join vs Left join in SQL.
* Compare ArrayList and LinkedList in Java.
* What is a Functional Interface? (Default functional interfaces in Java)
* Explain idempotent vs non-idempotent operations in REST.
* How to implement a Singleton class in Java?
* Difference between an interface and an abstract class.
* Code to get the frequency of each string from a list of strings.
* Types of Stream operations in Java (Terminal vs Intermediate operations).
* How to create an Immutable class in Java?
* Difference between WHERE and HAVING clauses in SQL.
* Can we use default and static methods inside a functional interface?

L2 Interview Questions

* Introduction (as usual)
* What is the CAP theorem?
* Which two principles of the CAP theorem does MongoDB prioritize?
* How to create a custom HashMap class with get and put method implementations?
* Detailed explanation of the working of HashMap.
* Write a signature for an API to handle login functionality for an application.
* How to decide between using an RDBMS or a NoSQL database?
* Explain isolation in the context of ACID properties.

==============================

𝗧𝗼𝗽𝗶𝗰 𝟭: 𝗣𝗿𝗼𝗷𝗲𝗰𝘁 𝗳𝗹𝗼𝘄 𝗮𝗻𝗱 𝗮𝗿𝗰𝗵𝗶𝘁𝗲𝗰𝘁𝘂𝗿𝗲 
 - Please tell me about your project and its architecture, Challenges faced?
 - What was your role in the project? Tech Stack of project? why this stack?
 - Problem you solved during the project? How collaboration within the team?
 - What lessons did you learn from working on this project?
 - If you could go back, what would you do differently in this project?

𝗧𝗼𝗽𝗶𝗰 𝟮: 𝗖𝗼𝗿𝗲 𝗝𝗮𝘃𝗮
 - String Concepts/Hashcode- Equal Methods
 - Immutability
 - OOPS concepts
 - Serialization
 - Collection Framework
 - Exception Handling
 - Multithreading
 - Java Memory Model
 - Garbage collection

𝗧𝗼𝗽𝗶𝗰 𝟯: 𝗝𝗮𝘃𝗮-𝟴/𝗝𝗮𝘃𝗮-𝟭𝟭/𝗝𝗮𝘃𝗮𝟭𝟳
 - Java 8 features
 - Default/Static methods
 - Lambda expression
 - Functional interfaces
 - Optional API
 - Stream API
 - Pattern matching
 - Text block
 - Modules

𝗧𝗼𝗽𝗶𝗰 𝟰: 𝗦𝗽𝗿𝗶𝗻𝗴 𝗙𝗿𝗮𝗺𝗲𝘄𝗼𝗿𝗸, 𝗦𝗽𝗿𝗶𝗻𝗴-𝗕𝗼𝗼𝘁, 𝗠𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲, 𝗮𝗻𝗱 𝗥𝗲𝘀𝘁 𝗔𝗣𝗜
 - Dependency Injection/IOC, Spring MVC
 - Configuration, Annotations, CRUD
 - Bean, Scopes, Profiles, Bean lifecycle
 - App context/Bean context
 - AOP, Exception Handler, Control Advice
 - Security (JWT, Oauth)
 - Actuators
 - WebFlux and Mono Framework
 - HTTP methods
 - JPA
 - Microservice concepts
 - Spring Cloud

𝗧𝗼𝗽𝗶𝗰 𝟱: 𝗛𝗶𝗯𝗲𝗿𝗻𝗮𝘁𝗲/𝗦𝗽𝗿𝗶𝗻𝗴-𝗱𝗮𝘁𝗮 𝗝𝗽𝗮/𝗗𝗮𝘁𝗮𝗯𝗮𝘀𝗲 (𝗦𝗤𝗟 𝗼𝗿 𝗡𝗼𝗦𝗤𝗟)
 - JPA Repositories
 - Relationship with Entities
 - SQL queries on Employee department
 - Queries, Highest Nth salary queries 
 - Relational and No-Relational DB concepts
 - CRUD operations in DB
 - Joins, indexing, procs, function

𝗧𝗼𝗽𝗶𝗰 𝟲: 𝗖𝗼𝗱𝗶𝗻𝗴
 - DSA Related Questions
 - Sorting and searching using Java API.
 - Stream API coding Questions

𝗧𝗼𝗽𝗶𝗰 𝟳: 𝗗𝗲𝘃𝗼𝗽𝘀 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀 𝗼𝗻 𝗱𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁 𝗧𝗼𝗼𝗹𝘀
 - These types of topics are mostly asked by managers or leads who are heavily working on it, That's why they may grill you on DevOps/deployment-related tools, You should have an understanding of common tools like Jenkins, Kubernetes, Kafka, Cloud, and all.

𝗧𝗼𝗽𝗶𝗰𝘀 𝟴: 𝗕𝗲𝘀𝘁 𝗽𝗿𝗮𝗰𝘁𝗶𝗰𝗲
 - The interviewer always wanted to ask about some design patterns, it maybe Normal design patterns like singleton, factory, or observer patterns to know that you can use these in coding.

==================================

Java Developer Interview Questions for Experienced
hashtag#java hashtag#interview hashtag#preparation
1.     You need to handle 1 million requests per second. How would you scale your backend architecture?
2.     If you are building an order management system, how would you design the services? (Database choices, API interactions, scalability)
3.     Design a simple service that asynchronously processes tasks using Spring Boot.
4.     You have a distributed system where one Microservice must call another but should retry on failure. How would you implement this in Spring Boot?
5.     You deployed a Spring Boot service, but it crashes with an "Out of Memory" error. How do you debug this?
6.     Your Spring Boot REST API, which fetches data from a database, suddenly becomes slow. The response time has increased from 100ms to 3 seconds.
7.     Your Spring Boot microservice is running on Kubernetes and after a few hours, it crashes with OutOfMemoryError.
·       What are the possible causes of memory leaks in Java?
·       How to find which objects are causing the memory leak?
·       How to use a profiler (like JVisualVM, YourKit) to detect leaks?

8.     One of your microservices has started consuming high CPU (90%), even though the incoming traffic is normal.
·       How to investigate and identify the root cause?
·       What could cause a thread to enter an infinite loop?
·        How can you profile CPU usage in a running application?

9.     You start your Spring Boot application, but it fails with a "BeanCurrentlyInCreationException" due to a circular dependency.
·       How to debug and fix this issue?
·       What Spring mechanisms help break circular dependencies?

10.  Your Spring Boot app occasionally freezes and stops processing requests.
·       How to detect a deadlock in Java?
·       How can you use jstack to diagnose the issue?
·       How can you avoid deadlocks in database transactions?

======================================================

Here are 25 system design interview questions commonly asked at top tech companies like Google, Meta, Amazon, and Flipkart:

𝗦𝗰𝗮𝗹𝗮𝗯𝗹𝗲 𝗦𝘆𝘀𝘁𝗲𝗺 𝗗𝗲𝘀𝗶𝗴𝗻:
1. Design a URL shortening service like Bitly.
2. Design a scalable social media feed system (e.g., Facebook News Feed)?
3. Design an online book reader system (similar to Kindle).
4. Design a global ride-sharing service like Uber?
5. Design a video streaming platform like YouTube or Netflix.
6. Design a scalable chat application like WhatsApp or Slack?
7. Design an e-commerce search system for a platform like Flipkart or Amazon.
8. Design a file storage and sharing service like Google Drive or Dropbox?
9. Design a real-time collaborative document editor like Google Docs.
10. Design a scalable notification system (e.g., push notifications for a mobile app)?

𝗥𝗲𝗮𝗹-𝘁𝗶𝗺𝗲 𝗦𝘆𝘀𝘁𝗲𝗺𝘀 & 𝗔𝗻𝗮𝗹𝘆𝘁𝗶𝗰𝘀:
11. Design a rate limiter for an API.
12. Design a system to detect fraudulent transactions in real-time?
13. Design a system for tracking and monitoring the location of delivery packages.
14. Design a real-time analytics dashboard (e.g., for monitoring website traffic)?
15. Design a live auction/bidding platform (e.g., eBay auctions).
16. Design a distributed cache system like Redis or Memcached?
17. Design a scalable logging and monitoring system (e.g., similar to ELK Stack).
18. Design a leaderboard system for an online game?

𝗦𝗲𝗮𝗿𝗰𝗵 & 𝗥𝗲𝗰𝗼𝗺𝗺𝗲𝗻𝗱𝗮𝘁𝗶𝗼𝗻 𝗦𝘆𝘀𝘁𝗲𝗺𝘀
19. Design a search autocomplete feature (e.g., Google Search suggestions).
20. Design a recommendation system for an e-commerce platform?
21. Design a system for ranking search results (e.g., Google Search PageRank).
22. Design a product recommendation system similar to Amazon's "Customers who bought this also bought"?

𝗛𝗶𝗴𝗵 𝗧𝗿𝗮𝗳𝗳𝗶𝗰 & 𝗖𝗼𝗻𝘁𝗲𝗻𝘁 𝗗𝗲𝗹𝗶𝘃𝗲𝗿𝘆
23. Design a content delivery network (CDN) like Cloudflare or Akamai.
24. Design a distributed ad-serving system (e.g., Google Ads)?
25. Design a scalable event ticketing platform (e.g., Ticketmaster).

Keeping this in mind, I’ve prepared System Design Guide.

𝗚𝗲𝘁 𝗶𝗻 𝗗𝗲𝗽𝘁𝗵 𝗦𝘆𝘀𝘁𝗲𝗺 𝗗𝗲𝘀𝗶𝗴𝗻 𝗞𝗜𝗧 𝗵𝗲𝗿𝗲: 
https://lnkd.in/dte69Z5N


==================================



